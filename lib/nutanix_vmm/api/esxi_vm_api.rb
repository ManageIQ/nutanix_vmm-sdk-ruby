=begin
#Nutanix Virtual Machine Management APIs

#Manage the life-cycle of virtual machines hosted on Nutanix

The version of the OpenAPI document: 4.0

Generated by: https://openapi-generator.tech
Generator version: 7.16.0

=end

require 'cgi'

module NutanixVmm
  class EsxiVmApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Assign owner of a VM
    # Assign the owner of a virtual machine.
    # @param ext_id [String] The globally unique identifier of an instance of type UUID.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_esxi_config_ownership_info [VmmV40EsxiConfigOwnershipInfo] 
    # @param [Hash] opts the optional parameters
    # @return [AssignVmOwner202Response]
    def assign_vm_owner(ext_id, ntnx_request_id, vmm_v40_esxi_config_ownership_info, opts = {})
      data, _status_code, _headers = assign_vm_owner_with_http_info(ext_id, ntnx_request_id, vmm_v40_esxi_config_ownership_info, opts)
      data
    end

    # Assign owner of a VM
    # Assign the owner of a virtual machine.
    # @param ext_id [String] The globally unique identifier of an instance of type UUID.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_esxi_config_ownership_info [VmmV40EsxiConfigOwnershipInfo] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AssignVmOwner202Response, Integer, Hash)>] AssignVmOwner202Response data, response status code and response headers
    def assign_vm_owner_with_http_info(ext_id, ntnx_request_id, vmm_v40_esxi_config_ownership_info, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EsxiVmApi.assign_vm_owner ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling EsxiVmApi.assign_vm_owner"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling EsxiVmApi.assign_vm_owner, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling EsxiVmApi.assign_vm_owner"
      end
      # verify the required parameter 'vmm_v40_esxi_config_ownership_info' is set
      if @api_client.config.client_side_validation && vmm_v40_esxi_config_ownership_info.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_esxi_config_ownership_info' when calling EsxiVmApi.assign_vm_owner"
      end
      # resource path
      local_var_path = '/vmm/v4.0/esxi/config/vms/{extId}/$actions/assign-owner'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_esxi_config_ownership_info)

      # return_type
      return_type = opts[:debug_return_type] || 'AssignVmOwner202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"EsxiVmApi.assign_vm_owner",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EsxiVmApi#assign_vm_owner\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Associate categories to a VM
    # Associate categories to a virtual machine.
    # @param ext_id [String] The globally unique identifier of an instance of type UUID.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_esxi_config_associate_vm_categories_params [VmmV40EsxiConfigAssociateVmCategoriesParams] 
    # @param [Hash] opts the optional parameters
    # @return [AssociateCategories202Response]
    def associate_categories(ext_id, ntnx_request_id, vmm_v40_esxi_config_associate_vm_categories_params, opts = {})
      data, _status_code, _headers = associate_categories_with_http_info(ext_id, ntnx_request_id, vmm_v40_esxi_config_associate_vm_categories_params, opts)
      data
    end

    # Associate categories to a VM
    # Associate categories to a virtual machine.
    # @param ext_id [String] The globally unique identifier of an instance of type UUID.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_esxi_config_associate_vm_categories_params [VmmV40EsxiConfigAssociateVmCategoriesParams] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AssociateCategories202Response, Integer, Hash)>] AssociateCategories202Response data, response status code and response headers
    def associate_categories_with_http_info(ext_id, ntnx_request_id, vmm_v40_esxi_config_associate_vm_categories_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EsxiVmApi.associate_categories ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling EsxiVmApi.associate_categories"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling EsxiVmApi.associate_categories, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling EsxiVmApi.associate_categories"
      end
      # verify the required parameter 'vmm_v40_esxi_config_associate_vm_categories_params' is set
      if @api_client.config.client_side_validation && vmm_v40_esxi_config_associate_vm_categories_params.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_esxi_config_associate_vm_categories_params' when calling EsxiVmApi.associate_categories"
      end
      # resource path
      local_var_path = '/vmm/v4.0/esxi/config/vms/{extId}/$actions/associate-categories'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_esxi_config_associate_vm_categories_params)

      # return_type
      return_type = opts[:debug_return_type] || 'AssociateCategories202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"EsxiVmApi.associate_categories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EsxiVmApi#associate_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disassociate categories from a VM
    # Disassociate categories from a virtual machine.
    # @param ext_id [String] The globally unique identifier of an instance of type UUID.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_esxi_config_disassociate_vm_categories_params [VmmV40EsxiConfigDisassociateVmCategoriesParams] 
    # @param [Hash] opts the optional parameters
    # @return [DisassociateCategories202Response]
    def disassociate_categories(ext_id, ntnx_request_id, vmm_v40_esxi_config_disassociate_vm_categories_params, opts = {})
      data, _status_code, _headers = disassociate_categories_with_http_info(ext_id, ntnx_request_id, vmm_v40_esxi_config_disassociate_vm_categories_params, opts)
      data
    end

    # Disassociate categories from a VM
    # Disassociate categories from a virtual machine.
    # @param ext_id [String] The globally unique identifier of an instance of type UUID.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_esxi_config_disassociate_vm_categories_params [VmmV40EsxiConfigDisassociateVmCategoriesParams] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DisassociateCategories202Response, Integer, Hash)>] DisassociateCategories202Response data, response status code and response headers
    def disassociate_categories_with_http_info(ext_id, ntnx_request_id, vmm_v40_esxi_config_disassociate_vm_categories_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EsxiVmApi.disassociate_categories ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling EsxiVmApi.disassociate_categories"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling EsxiVmApi.disassociate_categories, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling EsxiVmApi.disassociate_categories"
      end
      # verify the required parameter 'vmm_v40_esxi_config_disassociate_vm_categories_params' is set
      if @api_client.config.client_side_validation && vmm_v40_esxi_config_disassociate_vm_categories_params.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_esxi_config_disassociate_vm_categories_params' when calling EsxiVmApi.disassociate_categories"
      end
      # resource path
      local_var_path = '/vmm/v4.0/esxi/config/vms/{extId}/$actions/disassociate-categories'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_esxi_config_disassociate_vm_categories_params)

      # return_type
      return_type = opts[:debug_return_type] || 'DisassociateCategories202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"EsxiVmApi.disassociate_categories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EsxiVmApi#disassociate_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get VM NGT configuration
    # Retrieves the Nutanix Guest Tools configuration for a virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param [Hash] opts the optional parameters
    # @return [GetNutanixGuestToolsById200Response]
    def get_nutanix_guest_tools_by_id(ext_id, opts = {})
      data, _status_code, _headers = get_nutanix_guest_tools_by_id_with_http_info(ext_id, opts)
      data
    end

    # Get VM NGT configuration
    # Retrieves the Nutanix Guest Tools configuration for a virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetNutanixGuestToolsById200Response, Integer, Hash)>] GetNutanixGuestToolsById200Response data, response status code and response headers
    def get_nutanix_guest_tools_by_id_with_http_info(ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EsxiVmApi.get_nutanix_guest_tools_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling EsxiVmApi.get_nutanix_guest_tools_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling EsxiVmApi.get_nutanix_guest_tools_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vmm/v4.0/esxi/config/vms/{extId}/nutanix-guest-tools'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetNutanixGuestToolsById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"EsxiVmApi.get_nutanix_guest_tools_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EsxiVmApi#get_nutanix_guest_tools_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get VM configuration details
    # Retrieves configuration details for a virtual machine.
    # @param ext_id [String] The globally unique identifier of an instance of type UUID.
    # @param [Hash] opts the optional parameters
    # @return [GetVmById200Response]
    def get_vm_by_id(ext_id, opts = {})
      data, _status_code, _headers = get_vm_by_id_with_http_info(ext_id, opts)
      data
    end

    # Get VM configuration details
    # Retrieves configuration details for a virtual machine.
    # @param ext_id [String] The globally unique identifier of an instance of type UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetVmById200Response, Integer, Hash)>] GetVmById200Response data, response status code and response headers
    def get_vm_by_id_with_http_info(ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EsxiVmApi.get_vm_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling EsxiVmApi.get_vm_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling EsxiVmApi.get_vm_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vmm/v4.0/esxi/config/vms/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVmById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"EsxiVmApi.get_vm_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EsxiVmApi#get_vm_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert NGT ISO into an available CD-ROM for a VM
    # Inserts the Nutanix Guest Tools installation and configuration ISO into a virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_esxi_config_nutanix_guest_tools_insert_config [VmmV40EsxiConfigNutanixGuestToolsInsertConfig] 
    # @param [Hash] opts the optional parameters
    # @return [InsertNutanixGuestTools202Response]
    def insert_nutanix_guest_tools(ext_id, if_match, ntnx_request_id, vmm_v40_esxi_config_nutanix_guest_tools_insert_config, opts = {})
      data, _status_code, _headers = insert_nutanix_guest_tools_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_esxi_config_nutanix_guest_tools_insert_config, opts)
      data
    end

    # Insert NGT ISO into an available CD-ROM for a VM
    # Inserts the Nutanix Guest Tools installation and configuration ISO into a virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_esxi_config_nutanix_guest_tools_insert_config [VmmV40EsxiConfigNutanixGuestToolsInsertConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InsertNutanixGuestTools202Response, Integer, Hash)>] InsertNutanixGuestTools202Response data, response status code and response headers
    def insert_nutanix_guest_tools_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_esxi_config_nutanix_guest_tools_insert_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EsxiVmApi.insert_nutanix_guest_tools ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling EsxiVmApi.insert_nutanix_guest_tools"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling EsxiVmApi.insert_nutanix_guest_tools, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling EsxiVmApi.insert_nutanix_guest_tools"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling EsxiVmApi.insert_nutanix_guest_tools"
      end
      # verify the required parameter 'vmm_v40_esxi_config_nutanix_guest_tools_insert_config' is set
      if @api_client.config.client_side_validation && vmm_v40_esxi_config_nutanix_guest_tools_insert_config.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_esxi_config_nutanix_guest_tools_insert_config' when calling EsxiVmApi.insert_nutanix_guest_tools"
      end
      # resource path
      local_var_path = '/vmm/v4.0/esxi/config/vms/{extId}/nutanix-guest-tools/$actions/insert-iso'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_esxi_config_nutanix_guest_tools_insert_config)

      # return_type
      return_type = opts[:debug_return_type] || 'InsertNutanixGuestTools202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"EsxiVmApi.insert_nutanix_guest_tools",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EsxiVmApi#insert_nutanix_guest_tools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Install NGT in a VM
    # Installs Nutanix Guest Tools in a Virtual Machine by using the provided credentials.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_esxi_config_nutanix_guest_tools_install_config [VmmV40EsxiConfigNutanixGuestToolsInstallConfig] 
    # @param [Hash] opts the optional parameters
    # @return [InstallNutanixGuestTools202Response]
    def install_nutanix_guest_tools(ext_id, if_match, ntnx_request_id, vmm_v40_esxi_config_nutanix_guest_tools_install_config, opts = {})
      data, _status_code, _headers = install_nutanix_guest_tools_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_esxi_config_nutanix_guest_tools_install_config, opts)
      data
    end

    # Install NGT in a VM
    # Installs Nutanix Guest Tools in a Virtual Machine by using the provided credentials.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_esxi_config_nutanix_guest_tools_install_config [VmmV40EsxiConfigNutanixGuestToolsInstallConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InstallNutanixGuestTools202Response, Integer, Hash)>] InstallNutanixGuestTools202Response data, response status code and response headers
    def install_nutanix_guest_tools_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_esxi_config_nutanix_guest_tools_install_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EsxiVmApi.install_nutanix_guest_tools ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling EsxiVmApi.install_nutanix_guest_tools"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling EsxiVmApi.install_nutanix_guest_tools, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling EsxiVmApi.install_nutanix_guest_tools"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling EsxiVmApi.install_nutanix_guest_tools"
      end
      # verify the required parameter 'vmm_v40_esxi_config_nutanix_guest_tools_install_config' is set
      if @api_client.config.client_side_validation && vmm_v40_esxi_config_nutanix_guest_tools_install_config.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_esxi_config_nutanix_guest_tools_install_config' when calling EsxiVmApi.install_nutanix_guest_tools"
      end
      # resource path
      local_var_path = '/vmm/v4.0/esxi/config/vms/{extId}/nutanix-guest-tools/$actions/install'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_esxi_config_nutanix_guest_tools_install_config)

      # return_type
      return_type = opts[:debug_return_type] || 'InstallNutanixGuestTools202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"EsxiVmApi.install_nutanix_guest_tools",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EsxiVmApi#install_nutanix_guest_tools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List VMs
    # Lists the Virtual Machines defined on the system. List of Virtual Machines can be further filtered out using various filtering options.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - cluster/extId - guestOsName - host/extId - memorySizeBytes - name - numCoresPerSocket - numCpus - powerState - virtualHardwareVersion 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - guestOsName - memorySizeBytes - name - numCoresPerSocket - numCpus - virtualHardwareVersion 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - categories - cdRoms - cluster/extId - description - disks - extId - guestOsName - host/extId - links - memorySizeBytes - name - nics - numCoresPerSocket - numCpus - nutanixGuestTools/availableVersion - nutanixGuestTools/capabilities - nutanixGuestTools/guestOsVersion - nutanixGuestTools/isEnabled - nutanixGuestTools/isInstalled - nutanixGuestTools/isIsoInserted - nutanixGuestTools/isReachable - nutanixGuestTools/isVmMobilityDriversInstalled - nutanixGuestTools/isVssSnapshotCapable - nutanixGuestTools/version - ownershipInfo/owner - powerState - tenantId - virtualHardwareVersion 
    # @return [ListVms200Response]
    def list_vms(opts = {})
      data, _status_code, _headers = list_vms_with_http_info(opts)
      data
    end

    # List VMs
    # Lists the Virtual Machines defined on the system. List of Virtual Machines can be further filtered out using various filtering options.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - cluster/extId - guestOsName - host/extId - memorySizeBytes - name - numCoresPerSocket - numCpus - powerState - virtualHardwareVersion 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - guestOsName - memorySizeBytes - name - numCoresPerSocket - numCpus - virtualHardwareVersion 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - categories - cdRoms - cluster/extId - description - disks - extId - guestOsName - host/extId - links - memorySizeBytes - name - nics - numCoresPerSocket - numCpus - nutanixGuestTools/availableVersion - nutanixGuestTools/capabilities - nutanixGuestTools/guestOsVersion - nutanixGuestTools/isEnabled - nutanixGuestTools/isInstalled - nutanixGuestTools/isIsoInserted - nutanixGuestTools/isReachable - nutanixGuestTools/isVmMobilityDriversInstalled - nutanixGuestTools/isVssSnapshotCapable - nutanixGuestTools/version - ownershipInfo/owner - powerState - tenantId - virtualHardwareVersion 
    # @return [Array<(ListVms200Response, Integer, Hash)>] ListVms200Response data, response status code and response headers
    def list_vms_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EsxiVmApi.list_vms ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling EsxiVmApi.list_vms, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling EsxiVmApi.list_vms, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling EsxiVmApi.list_vms, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/vmm/v4.0/esxi/config/vms'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListVms200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"EsxiVmApi.list_vms",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EsxiVmApi#list_vms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Force power off a VM
    # Forceably shuts down a virtual machine which is equivalent to removing the power cable. Note: The forced shutdown may result in data loss if any operations are in progress during the shutdown.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [PowerOffVm202Response]
    def power_off_vm(ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = power_off_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Force power off a VM
    # Forceably shuts down a virtual machine which is equivalent to removing the power cable. Note: The forced shutdown may result in data loss if any operations are in progress during the shutdown.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PowerOffVm202Response, Integer, Hash)>] PowerOffVm202Response data, response status code and response headers
    def power_off_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EsxiVmApi.power_off_vm ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling EsxiVmApi.power_off_vm"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling EsxiVmApi.power_off_vm, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling EsxiVmApi.power_off_vm"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling EsxiVmApi.power_off_vm"
      end
      # resource path
      local_var_path = '/vmm/v4.0/esxi/config/vms/{extId}/$actions/power-off'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PowerOffVm202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"EsxiVmApi.power_off_vm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EsxiVmApi#power_off_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Power on or resume a VM
    # Powers a Virtual Machine on or resumes it from the suspended state.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [PowerOnVm202Response]
    def power_on_vm(ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = power_on_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Power on or resume a VM
    # Powers a Virtual Machine on or resumes it from the suspended state.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PowerOnVm202Response, Integer, Hash)>] PowerOnVm202Response data, response status code and response headers
    def power_on_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EsxiVmApi.power_on_vm ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling EsxiVmApi.power_on_vm"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling EsxiVmApi.power_on_vm, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling EsxiVmApi.power_on_vm"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling EsxiVmApi.power_on_vm"
      end
      # resource path
      local_var_path = '/vmm/v4.0/esxi/config/vms/{extId}/$actions/power-on'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PowerOnVm202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"EsxiVmApi.power_on_vm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EsxiVmApi#power_on_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Issue an ESXi guest OS reboot command
    # Issues a command to reboot ESXi guest OS. This operation requires ESXi tools installed.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [RebootGuestVm202Response]
    def reboot_guest_vm(ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = reboot_guest_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Issue an ESXi guest OS reboot command
    # Issues a command to reboot ESXi guest OS. This operation requires ESXi tools installed.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RebootGuestVm202Response, Integer, Hash)>] RebootGuestVm202Response data, response status code and response headers
    def reboot_guest_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EsxiVmApi.reboot_guest_vm ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling EsxiVmApi.reboot_guest_vm"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling EsxiVmApi.reboot_guest_vm, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling EsxiVmApi.reboot_guest_vm"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling EsxiVmApi.reboot_guest_vm"
      end
      # resource path
      local_var_path = '/vmm/v4.0/esxi/config/vms/{extId}/$actions/guest-reboot'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RebootGuestVm202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"EsxiVmApi.reboot_guest_vm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EsxiVmApi#reboot_guest_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset an ESXi VM by sequentially powering it off and on
    # Sequentially performs the power off and power on operations; any operation between these actions will fail.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [ResetVm202Response]
    def reset_vm(ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = reset_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Reset an ESXi VM by sequentially powering it off and on
    # Sequentially performs the power off and power on operations; any operation between these actions will fail.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResetVm202Response, Integer, Hash)>] ResetVm202Response data, response status code and response headers
    def reset_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EsxiVmApi.reset_vm ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling EsxiVmApi.reset_vm"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling EsxiVmApi.reset_vm, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling EsxiVmApi.reset_vm"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling EsxiVmApi.reset_vm"
      end
      # resource path
      local_var_path = '/vmm/v4.0/esxi/config/vms/{extId}/$actions/reset'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResetVm202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"EsxiVmApi.reset_vm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EsxiVmApi#reset_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Revert the ESXi VM.
    # Revert VM identified by {extId}. This does an in-place VM restore from a specified VM Recovery Point.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_esxi_config_revert_params [VmmV40EsxiConfigRevertParams] Input for the VM revert operation. Specify the VM Recovery Point ID to which the VM would be reverted.
    # @param [Hash] opts the optional parameters
    # @return [RevertVm202Response]
    def revert_vm(ext_id, if_match, ntnx_request_id, vmm_v40_esxi_config_revert_params, opts = {})
      data, _status_code, _headers = revert_vm_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_esxi_config_revert_params, opts)
      data
    end

    # Revert the ESXi VM.
    # Revert VM identified by {extId}. This does an in-place VM restore from a specified VM Recovery Point.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_esxi_config_revert_params [VmmV40EsxiConfigRevertParams] Input for the VM revert operation. Specify the VM Recovery Point ID to which the VM would be reverted.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RevertVm202Response, Integer, Hash)>] RevertVm202Response data, response status code and response headers
    def revert_vm_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_esxi_config_revert_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EsxiVmApi.revert_vm ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling EsxiVmApi.revert_vm"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling EsxiVmApi.revert_vm, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling EsxiVmApi.revert_vm"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling EsxiVmApi.revert_vm"
      end
      # verify the required parameter 'vmm_v40_esxi_config_revert_params' is set
      if @api_client.config.client_side_validation && vmm_v40_esxi_config_revert_params.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_esxi_config_revert_params' when calling EsxiVmApi.revert_vm"
      end
      # resource path
      local_var_path = '/vmm/v4.0/esxi/config/vms/{extId}/$actions/revert'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_esxi_config_revert_params)

      # return_type
      return_type = opts[:debug_return_type] || 'RevertVm202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"EsxiVmApi.revert_vm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EsxiVmApi#revert_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Shut down services on ESXi guest OS
    # Issues a command to the ESXi guest OS to perform a clean shut down of services running on it. This operation requires ESXi tools to be installed.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [ShutdownGuestVm202Response]
    def shutdown_guest_vm(ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = shutdown_guest_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Shut down services on ESXi guest OS
    # Issues a command to the ESXi guest OS to perform a clean shut down of services running on it. This operation requires ESXi tools to be installed.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShutdownGuestVm202Response, Integer, Hash)>] ShutdownGuestVm202Response data, response status code and response headers
    def shutdown_guest_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EsxiVmApi.shutdown_guest_vm ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling EsxiVmApi.shutdown_guest_vm"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling EsxiVmApi.shutdown_guest_vm, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling EsxiVmApi.shutdown_guest_vm"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling EsxiVmApi.shutdown_guest_vm"
      end
      # resource path
      local_var_path = '/vmm/v4.0/esxi/config/vms/{extId}/$actions/guest-shutdown'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ShutdownGuestVm202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"EsxiVmApi.shutdown_guest_vm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EsxiVmApi#shutdown_guest_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Pause/Suspend virtual machine execution
    # Pause/Suspend execution in an ESXi virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [SuspendVm202Response]
    def suspend_vm(ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = suspend_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Pause/Suspend virtual machine execution
    # Pause/Suspend execution in an ESXi virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuspendVm202Response, Integer, Hash)>] SuspendVm202Response data, response status code and response headers
    def suspend_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EsxiVmApi.suspend_vm ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling EsxiVmApi.suspend_vm"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling EsxiVmApi.suspend_vm, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling EsxiVmApi.suspend_vm"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling EsxiVmApi.suspend_vm"
      end
      # resource path
      local_var_path = '/vmm/v4.0/esxi/config/vms/{extId}/$actions/suspend'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuspendVm202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"EsxiVmApi.suspend_vm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EsxiVmApi#suspend_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Uninstall NGT from a VM
    # Trigger an in-guest uninstallation of Nutanix Guest Tools.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [UninstallNutanixGuestTools202Response]
    def uninstall_nutanix_guest_tools(ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = uninstall_nutanix_guest_tools_with_http_info(ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Uninstall NGT from a VM
    # Trigger an in-guest uninstallation of Nutanix Guest Tools.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UninstallNutanixGuestTools202Response, Integer, Hash)>] UninstallNutanixGuestTools202Response data, response status code and response headers
    def uninstall_nutanix_guest_tools_with_http_info(ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EsxiVmApi.uninstall_nutanix_guest_tools ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling EsxiVmApi.uninstall_nutanix_guest_tools"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling EsxiVmApi.uninstall_nutanix_guest_tools, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling EsxiVmApi.uninstall_nutanix_guest_tools"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling EsxiVmApi.uninstall_nutanix_guest_tools"
      end
      # resource path
      local_var_path = '/vmm/v4.0/esxi/config/vms/{extId}/nutanix-guest-tools/$actions/uninstall'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UninstallNutanixGuestTools202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"EsxiVmApi.uninstall_nutanix_guest_tools",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EsxiVmApi#uninstall_nutanix_guest_tools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update NGT configuration for a VM
    # Updates the Nutanix Guest Tools configuration for a virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_esxi_config_nutanix_guest_tools [VmmV40EsxiConfigNutanixGuestTools] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateNutanixGuestToolsById202Response]
    def update_nutanix_guest_tools_by_id(ext_id, if_match, ntnx_request_id, vmm_v40_esxi_config_nutanix_guest_tools, opts = {})
      data, _status_code, _headers = update_nutanix_guest_tools_by_id_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_esxi_config_nutanix_guest_tools, opts)
      data
    end

    # Update NGT configuration for a VM
    # Updates the Nutanix Guest Tools configuration for a virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_esxi_config_nutanix_guest_tools [VmmV40EsxiConfigNutanixGuestTools] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateNutanixGuestToolsById202Response, Integer, Hash)>] UpdateNutanixGuestToolsById202Response data, response status code and response headers
    def update_nutanix_guest_tools_by_id_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_esxi_config_nutanix_guest_tools, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EsxiVmApi.update_nutanix_guest_tools_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling EsxiVmApi.update_nutanix_guest_tools_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling EsxiVmApi.update_nutanix_guest_tools_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling EsxiVmApi.update_nutanix_guest_tools_by_id"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling EsxiVmApi.update_nutanix_guest_tools_by_id"
      end
      # verify the required parameter 'vmm_v40_esxi_config_nutanix_guest_tools' is set
      if @api_client.config.client_side_validation && vmm_v40_esxi_config_nutanix_guest_tools.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_esxi_config_nutanix_guest_tools' when calling EsxiVmApi.update_nutanix_guest_tools_by_id"
      end
      # resource path
      local_var_path = '/vmm/v4.0/esxi/config/vms/{extId}/nutanix-guest-tools'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_esxi_config_nutanix_guest_tools)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateNutanixGuestToolsById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"EsxiVmApi.update_nutanix_guest_tools_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EsxiVmApi#update_nutanix_guest_tools_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upgrade NGT inside a VM
    # Trigger an in-guest upgrade of Nutanix Guest Tools.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_esxi_config_nutanix_guest_tools_upgrade_config [VmmV40EsxiConfigNutanixGuestToolsUpgradeConfig] 
    # @param [Hash] opts the optional parameters
    # @return [UpgradeNutanixGuestTools202Response]
    def upgrade_nutanix_guest_tools(ext_id, if_match, ntnx_request_id, vmm_v40_esxi_config_nutanix_guest_tools_upgrade_config, opts = {})
      data, _status_code, _headers = upgrade_nutanix_guest_tools_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_esxi_config_nutanix_guest_tools_upgrade_config, opts)
      data
    end

    # Upgrade NGT inside a VM
    # Trigger an in-guest upgrade of Nutanix Guest Tools.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_esxi_config_nutanix_guest_tools_upgrade_config [VmmV40EsxiConfigNutanixGuestToolsUpgradeConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradeNutanixGuestTools202Response, Integer, Hash)>] UpgradeNutanixGuestTools202Response data, response status code and response headers
    def upgrade_nutanix_guest_tools_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_esxi_config_nutanix_guest_tools_upgrade_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EsxiVmApi.upgrade_nutanix_guest_tools ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling EsxiVmApi.upgrade_nutanix_guest_tools"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling EsxiVmApi.upgrade_nutanix_guest_tools, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling EsxiVmApi.upgrade_nutanix_guest_tools"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling EsxiVmApi.upgrade_nutanix_guest_tools"
      end
      # verify the required parameter 'vmm_v40_esxi_config_nutanix_guest_tools_upgrade_config' is set
      if @api_client.config.client_side_validation && vmm_v40_esxi_config_nutanix_guest_tools_upgrade_config.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_esxi_config_nutanix_guest_tools_upgrade_config' when calling EsxiVmApi.upgrade_nutanix_guest_tools"
      end
      # resource path
      local_var_path = '/vmm/v4.0/esxi/config/vms/{extId}/nutanix-guest-tools/$actions/upgrade'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_esxi_config_nutanix_guest_tools_upgrade_config)

      # return_type
      return_type = opts[:debug_return_type] || 'UpgradeNutanixGuestTools202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"EsxiVmApi.upgrade_nutanix_guest_tools",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EsxiVmApi#upgrade_nutanix_guest_tools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
