=begin
#Nutanix Virtual Machine Management APIs

#Manage the life-cycle of virtual machines hosted on Nutanix

The version of the OpenAPI document: 4.0

Generated by: https://openapi-generator.tech
Generator version: 7.16.0

=end

require 'cgi'

module NutanixVmm
  class TemplatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancel guest OS update
    # This operation cancels the update initiated by the \"Initiate guest OS update\" API for the given template. The temporary VM created during the update process is deleted, and the pending update status is cleared. Please note that any modifications made to the temporary VM will be lost upon cancelling the update operation. 
    # @param ext_id [String] The identifier of a template.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [CancelGuestUpdate202Response]
    def cancel_guest_update(ext_id, ntnx_request_id, opts = {})
      data, _status_code, _headers = cancel_guest_update_with_http_info(ext_id, ntnx_request_id, opts)
      data
    end

    # Cancel guest OS update
    # This operation cancels the update initiated by the \&quot;Initiate guest OS update\&quot; API for the given template. The temporary VM created during the update process is deleted, and the pending update status is cleared. Please note that any modifications made to the temporary VM will be lost upon cancelling the update operation. 
    # @param ext_id [String] The identifier of a template.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CancelGuestUpdate202Response, Integer, Hash)>] CancelGuestUpdate202Response data, response status code and response headers
    def cancel_guest_update_with_http_info(ext_id, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.cancel_guest_update ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling TemplatesApi.cancel_guest_update"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling TemplatesApi.cancel_guest_update, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling TemplatesApi.cancel_guest_update"
      end
      # resource path
      local_var_path = '/vmm/v4.0/content/templates/{extId}/$actions/cancel-guest-update'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CancelGuestUpdate202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"TemplatesApi.cancel_guest_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#cancel_guest_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Complete guest OS update
    # This operation finalizes the update initiated by the \"Initiate guest OS update\" API for the template. A new version is added to the template, the temporary VM created during the update process is deleted, and the pending update status is cleared. 
    # @param ext_id [String] The identifier of a template.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_content_complete_guest_update_spec [VmmV40ContentCompleteGuestUpdateSpec] Request to complete the ongoing guest update on a template.
    # @param [Hash] opts the optional parameters
    # @return [CompleteGuestUpdate202Response]
    def complete_guest_update(ext_id, ntnx_request_id, vmm_v40_content_complete_guest_update_spec, opts = {})
      data, _status_code, _headers = complete_guest_update_with_http_info(ext_id, ntnx_request_id, vmm_v40_content_complete_guest_update_spec, opts)
      data
    end

    # Complete guest OS update
    # This operation finalizes the update initiated by the \&quot;Initiate guest OS update\&quot; API for the template. A new version is added to the template, the temporary VM created during the update process is deleted, and the pending update status is cleared. 
    # @param ext_id [String] The identifier of a template.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_content_complete_guest_update_spec [VmmV40ContentCompleteGuestUpdateSpec] Request to complete the ongoing guest update on a template.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CompleteGuestUpdate202Response, Integer, Hash)>] CompleteGuestUpdate202Response data, response status code and response headers
    def complete_guest_update_with_http_info(ext_id, ntnx_request_id, vmm_v40_content_complete_guest_update_spec, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.complete_guest_update ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling TemplatesApi.complete_guest_update"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling TemplatesApi.complete_guest_update, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling TemplatesApi.complete_guest_update"
      end
      # verify the required parameter 'vmm_v40_content_complete_guest_update_spec' is set
      if @api_client.config.client_side_validation && vmm_v40_content_complete_guest_update_spec.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_content_complete_guest_update_spec' when calling TemplatesApi.complete_guest_update"
      end
      # resource path
      local_var_path = '/vmm/v4.0/content/templates/{extId}/$actions/complete-guest-update'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_content_complete_guest_update_spec)

      # return_type
      return_type = opts[:debug_return_type] || 'CompleteGuestUpdate202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"TemplatesApi.complete_guest_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#complete_guest_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create template from a VM
    # Creates a template from the given VM identifier. A template stores the VM configuration and disks from the source VM. 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_content_template [VmmV40ContentTemplate] Request to create a template.
    # @param [Hash] opts the optional parameters
    # @return [CreateTemplate202Response]
    def create_template(ntnx_request_id, vmm_v40_content_template, opts = {})
      data, _status_code, _headers = create_template_with_http_info(ntnx_request_id, vmm_v40_content_template, opts)
      data
    end

    # Create template from a VM
    # Creates a template from the given VM identifier. A template stores the VM configuration and disks from the source VM. 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_content_template [VmmV40ContentTemplate] Request to create a template.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateTemplate202Response, Integer, Hash)>] CreateTemplate202Response data, response status code and response headers
    def create_template_with_http_info(ntnx_request_id, vmm_v40_content_template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.create_template ...'
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling TemplatesApi.create_template"
      end
      # verify the required parameter 'vmm_v40_content_template' is set
      if @api_client.config.client_side_validation && vmm_v40_content_template.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_content_template' when calling TemplatesApi.create_template"
      end
      # resource path
      local_var_path = '/vmm/v4.0/content/templates'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_content_template)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateTemplate202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"TemplatesApi.create_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#create_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a template and its associated versions
    # Deletes the template and all of its versions for a given template identifier.
    # @param ext_id [String] The identifier of a template.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [DeleteTemplateById202Response]
    def delete_template_by_id(ext_id, ntnx_request_id, opts = {})
      data, _status_code, _headers = delete_template_by_id_with_http_info(ext_id, ntnx_request_id, opts)
      data
    end

    # Delete a template and its associated versions
    # Deletes the template and all of its versions for a given template identifier.
    # @param ext_id [String] The identifier of a template.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteTemplateById202Response, Integer, Hash)>] DeleteTemplateById202Response data, response status code and response headers
    def delete_template_by_id_with_http_info(ext_id, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.delete_template_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling TemplatesApi.delete_template_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling TemplatesApi.delete_template_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling TemplatesApi.delete_template_by_id"
      end
      # resource path
      local_var_path = '/vmm/v4.0/content/templates/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteTemplateById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"TemplatesApi.delete_template_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#delete_template_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a template version
    # Deletes a version for the given template version identifier.
    # @param template_ext_id [String] The identifier of a template.
    # @param ext_id [String] The identifier of a version.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [DeleteTemplateVersionById202Response]
    def delete_template_version_by_id(template_ext_id, ext_id, ntnx_request_id, opts = {})
      data, _status_code, _headers = delete_template_version_by_id_with_http_info(template_ext_id, ext_id, ntnx_request_id, opts)
      data
    end

    # Delete a template version
    # Deletes a version for the given template version identifier.
    # @param template_ext_id [String] The identifier of a template.
    # @param ext_id [String] The identifier of a version.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteTemplateVersionById202Response, Integer, Hash)>] DeleteTemplateVersionById202Response data, response status code and response headers
    def delete_template_version_by_id_with_http_info(template_ext_id, ext_id, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.delete_template_version_by_id ...'
      end
      # verify the required parameter 'template_ext_id' is set
      if @api_client.config.client_side_validation && template_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_ext_id' when calling TemplatesApi.delete_template_version_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && template_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'template_ext_id' when calling TemplatesApi.delete_template_version_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling TemplatesApi.delete_template_version_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling TemplatesApi.delete_template_version_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling TemplatesApi.delete_template_version_by_id"
      end
      # resource path
      local_var_path = '/vmm/v4.0/content/templates/{templateExtId}/versions/{extId}'.sub('{' + 'templateExtId' + '}', CGI.escape(template_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteTemplateVersionById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"TemplatesApi.delete_template_version_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#delete_template_version_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deploy VMs from a template
    # Deploys one or more VMs from a template. You can specify the number of VMs to deploy and their corresponding VM configuration overrides. 
    # @param ext_id [String] The identifier of a template.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_content_template_deployment [VmmV40ContentTemplateDeployment] Request to deploy VMs from a template.
    # @param [Hash] opts the optional parameters
    # @return [DeployTemplate202Response]
    def deploy_template(ext_id, ntnx_request_id, vmm_v40_content_template_deployment, opts = {})
      data, _status_code, _headers = deploy_template_with_http_info(ext_id, ntnx_request_id, vmm_v40_content_template_deployment, opts)
      data
    end

    # Deploy VMs from a template
    # Deploys one or more VMs from a template. You can specify the number of VMs to deploy and their corresponding VM configuration overrides. 
    # @param ext_id [String] The identifier of a template.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_content_template_deployment [VmmV40ContentTemplateDeployment] Request to deploy VMs from a template.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeployTemplate202Response, Integer, Hash)>] DeployTemplate202Response data, response status code and response headers
    def deploy_template_with_http_info(ext_id, ntnx_request_id, vmm_v40_content_template_deployment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.deploy_template ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling TemplatesApi.deploy_template"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling TemplatesApi.deploy_template, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling TemplatesApi.deploy_template"
      end
      # verify the required parameter 'vmm_v40_content_template_deployment' is set
      if @api_client.config.client_side_validation && vmm_v40_content_template_deployment.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_content_template_deployment' when calling TemplatesApi.deploy_template"
      end
      # resource path
      local_var_path = '/vmm/v4.0/content/templates/{extId}/$actions/deploy'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_content_template_deployment)

      # return_type
      return_type = opts[:debug_return_type] || 'DeployTemplate202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"TemplatesApi.deploy_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#deploy_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get template details
    # Retrieves the template details for a given template identifier.
    # @param ext_id [String] The identifier of a template.
    # @param [Hash] opts the optional parameters
    # @return [GetTemplateById200Response]
    def get_template_by_id(ext_id, opts = {})
      data, _status_code, _headers = get_template_by_id_with_http_info(ext_id, opts)
      data
    end

    # Get template details
    # Retrieves the template details for a given template identifier.
    # @param ext_id [String] The identifier of a template.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTemplateById200Response, Integer, Hash)>] GetTemplateById200Response data, response status code and response headers
    def get_template_by_id_with_http_info(ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.get_template_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling TemplatesApi.get_template_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling TemplatesApi.get_template_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vmm/v4.0/content/templates/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTemplateById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"TemplatesApi.get_template_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#get_template_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the template version detail
    # Retrieves the template version details of the given template and version identifier.
    # @param template_ext_id [String] The identifier of a template.
    # @param ext_id [String] The identifier of a version.
    # @param [Hash] opts the optional parameters
    # @return [GetTemplateVersionById200Response]
    def get_template_version_by_id(template_ext_id, ext_id, opts = {})
      data, _status_code, _headers = get_template_version_by_id_with_http_info(template_ext_id, ext_id, opts)
      data
    end

    # Get the template version detail
    # Retrieves the template version details of the given template and version identifier.
    # @param template_ext_id [String] The identifier of a template.
    # @param ext_id [String] The identifier of a version.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTemplateVersionById200Response, Integer, Hash)>] GetTemplateVersionById200Response data, response status code and response headers
    def get_template_version_by_id_with_http_info(template_ext_id, ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.get_template_version_by_id ...'
      end
      # verify the required parameter 'template_ext_id' is set
      if @api_client.config.client_side_validation && template_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_ext_id' when calling TemplatesApi.get_template_version_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && template_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'template_ext_id' when calling TemplatesApi.get_template_version_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling TemplatesApi.get_template_version_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling TemplatesApi.get_template_version_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vmm/v4.0/content/templates/{templateExtId}/versions/{extId}'.sub('{' + 'templateExtId' + '}', CGI.escape(template_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTemplateVersionById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"TemplatesApi.get_template_version_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#get_template_version_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate guest OS updates
    # Initiates the process of updating the Guest OS from a given template version identifier. Only one guest OS update can be initiated for a template at a time. A temporary VM is created where the guest OS updates will be applied. The user must make the necessary modifications to this temporary VM. After completing the modifications, the user should issue the \"Complete Guest OS Update\" command to finalize the update. The \"Cancel Guest OS Update\" command can be issued at any time to abort an ongoing update. 
    # @param ext_id [String] The identifier of a template.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @option opts [VmmV40ContentInitiateGuestUpdateSpec] :vmm_v40_content_initiate_guest_update_spec Request to initiate guest update on a template.
    # @return [InitiateGuestUpdate202Response]
    def initiate_guest_update(ext_id, ntnx_request_id, opts = {})
      data, _status_code, _headers = initiate_guest_update_with_http_info(ext_id, ntnx_request_id, opts)
      data
    end

    # Initiate guest OS updates
    # Initiates the process of updating the Guest OS from a given template version identifier. Only one guest OS update can be initiated for a template at a time. A temporary VM is created where the guest OS updates will be applied. The user must make the necessary modifications to this temporary VM. After completing the modifications, the user should issue the \&quot;Complete Guest OS Update\&quot; command to finalize the update. The \&quot;Cancel Guest OS Update\&quot; command can be issued at any time to abort an ongoing update. 
    # @param ext_id [String] The identifier of a template.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @option opts [VmmV40ContentInitiateGuestUpdateSpec] :vmm_v40_content_initiate_guest_update_spec Request to initiate guest update on a template.
    # @return [Array<(InitiateGuestUpdate202Response, Integer, Hash)>] InitiateGuestUpdate202Response data, response status code and response headers
    def initiate_guest_update_with_http_info(ext_id, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.initiate_guest_update ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling TemplatesApi.initiate_guest_update"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling TemplatesApi.initiate_guest_update, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling TemplatesApi.initiate_guest_update"
      end
      # resource path
      local_var_path = '/vmm/v4.0/content/templates/{extId}/$actions/initiate-guest-update'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'vmm_v40_content_initiate_guest_update_spec'])

      # return_type
      return_type = opts[:debug_return_type] || 'InitiateGuestUpdate202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"TemplatesApi.initiate_guest_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#initiate_guest_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all versions in a template
    # Lists all the versions of a template with details such as name, description, VM configuration and so on. This operation supports filtering, sorting and pagination. 
    # @param template_ext_id [String] The identifier of a template.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - versionName 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - createTime - versionName 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - createTime - createdBy - isActiveVersion - isGcOverrideEnabled - versionDescription - versionName - vmSpec 
    # @return [ListTemplateVersions200Response]
    def list_template_versions(template_ext_id, opts = {})
      data, _status_code, _headers = list_template_versions_with_http_info(template_ext_id, opts)
      data
    end

    # List all versions in a template
    # Lists all the versions of a template with details such as name, description, VM configuration and so on. This operation supports filtering, sorting and pagination. 
    # @param template_ext_id [String] The identifier of a template.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - versionName 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - createTime - versionName 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - createTime - createdBy - isActiveVersion - isGcOverrideEnabled - versionDescription - versionName - vmSpec 
    # @return [Array<(ListTemplateVersions200Response, Integer, Hash)>] ListTemplateVersions200Response data, response status code and response headers
    def list_template_versions_with_http_info(template_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.list_template_versions ...'
      end
      # verify the required parameter 'template_ext_id' is set
      if @api_client.config.client_side_validation && template_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_ext_id' when calling TemplatesApi.list_template_versions"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && template_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'template_ext_id' when calling TemplatesApi.list_template_versions, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling TemplatesApi.list_template_versions, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling TemplatesApi.list_template_versions, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling TemplatesApi.list_template_versions, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/vmm/v4.0/content/templates/{templateExtId}/versions'.sub('{' + 'templateExtId' + '}', CGI.escape(template_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListTemplateVersions200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"TemplatesApi.list_template_versions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#list_template_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all templates
    # Lists templates with details such as name, description, VM configuration and so on. This operation supports filtering, sorting and pagination. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - templateName 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - templateName - updateTime 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - createTime - createdBy - guestUpdateStatus - templateDescription - templateName - templateVersionSpec - updateTime - updatedBy 
    # @return [ListTemplates200Response]
    def list_templates(opts = {})
      data, _status_code, _headers = list_templates_with_http_info(opts)
      data
    end

    # List all templates
    # Lists templates with details such as name, description, VM configuration and so on. This operation supports filtering, sorting and pagination. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - templateName 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - templateName - updateTime 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - createTime - createdBy - guestUpdateStatus - templateDescription - templateName - templateVersionSpec - updateTime - updatedBy 
    # @return [Array<(ListTemplates200Response, Integer, Hash)>] ListTemplates200Response data, response status code and response headers
    def list_templates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.list_templates ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling TemplatesApi.list_templates, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling TemplatesApi.list_templates, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling TemplatesApi.list_templates, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/vmm/v4.0/content/templates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListTemplates200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"TemplatesApi.list_templates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#list_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set an active version
    # Designate the template version identified by the given identifier as the active version. An active version is a default version for creating VMs from the template and starting the Guest OS Update. 
    # @param ext_id [String] The identifier of a template.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_content_template_publish_spec [VmmV40ContentTemplatePublishSpec] Request to publish version of a template.
    # @param [Hash] opts the optional parameters
    # @return [PublishTemplate202Response]
    def publish_template(ext_id, if_match, ntnx_request_id, vmm_v40_content_template_publish_spec, opts = {})
      data, _status_code, _headers = publish_template_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_content_template_publish_spec, opts)
      data
    end

    # Set an active version
    # Designate the template version identified by the given identifier as the active version. An active version is a default version for creating VMs from the template and starting the Guest OS Update. 
    # @param ext_id [String] The identifier of a template.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_content_template_publish_spec [VmmV40ContentTemplatePublishSpec] Request to publish version of a template.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublishTemplate202Response, Integer, Hash)>] PublishTemplate202Response data, response status code and response headers
    def publish_template_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_content_template_publish_spec, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.publish_template ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling TemplatesApi.publish_template"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling TemplatesApi.publish_template, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling TemplatesApi.publish_template"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling TemplatesApi.publish_template"
      end
      # verify the required parameter 'vmm_v40_content_template_publish_spec' is set
      if @api_client.config.client_side_validation && vmm_v40_content_template_publish_spec.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_content_template_publish_spec' when calling TemplatesApi.publish_template"
      end
      # resource path
      local_var_path = '/vmm/v4.0/content/templates/{extId}/$actions/publish'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_content_template_publish_spec)

      # return_type
      return_type = opts[:debug_return_type] || 'PublishTemplate202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"TemplatesApi.publish_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#publish_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a template
    # Updates a template with the given template identifier. This operation updates the template configuration and/or adds a new version to the template. Unless otherwise specified, the newly created version is set as the active version. 
    # @param ext_id [String] The identifier of a template.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @option opts [VmmV40ContentTemplate] :vmm_v40_content_template Request to update a template.
    # @return [UpdateTemplateById202Response]
    def update_template_by_id(ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = update_template_by_id_with_http_info(ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Update a template
    # Updates a template with the given template identifier. This operation updates the template configuration and/or adds a new version to the template. Unless otherwise specified, the newly created version is set as the active version. 
    # @param ext_id [String] The identifier of a template.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @option opts [VmmV40ContentTemplate] :vmm_v40_content_template Request to update a template.
    # @return [Array<(UpdateTemplateById202Response, Integer, Hash)>] UpdateTemplateById202Response data, response status code and response headers
    def update_template_by_id_with_http_info(ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.update_template_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling TemplatesApi.update_template_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling TemplatesApi.update_template_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling TemplatesApi.update_template_by_id"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling TemplatesApi.update_template_by_id"
      end
      # resource path
      local_var_path = '/vmm/v4.0/content/templates/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'vmm_v40_content_template'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateTemplateById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"TemplatesApi.update_template_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#update_template_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
