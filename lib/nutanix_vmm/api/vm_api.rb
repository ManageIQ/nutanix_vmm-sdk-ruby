=begin
#Nutanix Virtual Machine Management APIs

#Manage the life-cycle of virtual machines hosted on Nutanix

The version of the OpenAPI document: 4.0

Generated by: https://openapi-generator.tech
Generator version: 7.16.0

=end

require 'cgi'

module NutanixVmm
  class VmApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Assign an IP address to the provided network device
    # Assigns a specific IP address to a network device attached to a managed network.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a VM NIC of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_assign_ip_params [VmmV40AhvConfigAssignIpParams] 
    # @param [Hash] opts the optional parameters
    # @return [AssignIpById202Response]
    def assign_ip_by_id(vm_ext_id, ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_assign_ip_params, opts = {})
      data, _status_code, _headers = assign_ip_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_assign_ip_params, opts)
      data
    end

    # Assign an IP address to the provided network device
    # Assigns a specific IP address to a network device attached to a managed network.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a VM NIC of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_assign_ip_params [VmmV40AhvConfigAssignIpParams] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AssignIpById202Response, Integer, Hash)>] AssignIpById202Response data, response status code and response headers
    def assign_ip_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_assign_ip_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.assign_ip_by_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.assign_ip_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.assign_ip_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.assign_ip_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.assign_ip_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.assign_ip_by_id"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.assign_ip_by_id"
      end
      # verify the required parameter 'vmm_v40_ahv_config_assign_ip_params' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_assign_ip_params.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_assign_ip_params' when calling VmApi.assign_ip_by_id"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/nics/{extId}/$actions/assign-ip'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_assign_ip_params)

      # return_type
      return_type = opts[:debug_return_type] || 'AssignIpById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.assign_ip_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#assign_ip_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Assign owner of a VM
    # Assign the owner of a virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_ownership_info [VmmV40AhvConfigOwnershipInfo] 
    # @param [Hash] opts the optional parameters
    # @return [AssignVmOwner202Response1]
    def assign_vm_owner(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_ownership_info, opts = {})
      data, _status_code, _headers = assign_vm_owner_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_ownership_info, opts)
      data
    end

    # Assign owner of a VM
    # Assign the owner of a virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_ownership_info [VmmV40AhvConfigOwnershipInfo] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AssignVmOwner202Response1, Integer, Hash)>] AssignVmOwner202Response1 data, response status code and response headers
    def assign_vm_owner_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_ownership_info, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.assign_vm_owner ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.assign_vm_owner"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.assign_vm_owner, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.assign_vm_owner"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.assign_vm_owner"
      end
      # verify the required parameter 'vmm_v40_ahv_config_ownership_info' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_ownership_info.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_ownership_info' when calling VmApi.assign_vm_owner"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}/$actions/assign-owner'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_ownership_info)

      # return_type
      return_type = opts[:debug_return_type] || 'AssignVmOwner202Response1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.assign_vm_owner",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#assign_vm_owner\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Associate categories to a VM
    # Associate categories to a virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_associate_vm_categories_params [VmmV40AhvConfigAssociateVmCategoriesParams] 
    # @param [Hash] opts the optional parameters
    # @return [AssociateCategories202Response1]
    def associate_categories(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_associate_vm_categories_params, opts = {})
      data, _status_code, _headers = associate_categories_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_associate_vm_categories_params, opts)
      data
    end

    # Associate categories to a VM
    # Associate categories to a virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_associate_vm_categories_params [VmmV40AhvConfigAssociateVmCategoriesParams] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AssociateCategories202Response1, Integer, Hash)>] AssociateCategories202Response1 data, response status code and response headers
    def associate_categories_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_associate_vm_categories_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.associate_categories ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.associate_categories"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.associate_categories, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.associate_categories"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.associate_categories"
      end
      # verify the required parameter 'vmm_v40_ahv_config_associate_vm_categories_params' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_associate_vm_categories_params.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_associate_vm_categories_params' when calling VmApi.associate_categories"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}/$actions/associate-categories'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_associate_vm_categories_params)

      # return_type
      return_type = opts[:debug_return_type] || 'AssociateCategories202Response1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.associate_categories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#associate_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clone a VM
    # Clones an existing virtual machine. This operation also includes updating the existing configuration during the clone operation.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @option opts [VmmV40AhvConfigCloneOverrideParams] :vmm_v40_ahv_config_clone_override_params 
    # @return [CloneVm202Response]
    def clone_vm(ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = clone_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Clone a VM
    # Clones an existing virtual machine. This operation also includes updating the existing configuration during the clone operation.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @option opts [VmmV40AhvConfigCloneOverrideParams] :vmm_v40_ahv_config_clone_override_params 
    # @return [Array<(CloneVm202Response, Integer, Hash)>] CloneVm202Response data, response status code and response headers
    def clone_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.clone_vm ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.clone_vm"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.clone_vm, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.clone_vm"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.clone_vm"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}/$actions/clone'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'vmm_v40_ahv_config_clone_override_params'])

      # return_type
      return_type = opts[:debug_return_type] || 'CloneVm202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.clone_vm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#clone_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a CD-ROM device for a VM
    # Creates and attaches a CD-ROM device to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_cd_rom [VmmV40AhvConfigCdRom] 
    # @param [Hash] opts the optional parameters
    # @return [CreateCdRom202Response]
    def create_cd_rom(vm_ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_cd_rom, opts = {})
      data, _status_code, _headers = create_cd_rom_with_http_info(vm_ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_cd_rom, opts)
      data
    end

    # Create a CD-ROM device for a VM
    # Creates and attaches a CD-ROM device to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_cd_rom [VmmV40AhvConfigCdRom] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateCdRom202Response, Integer, Hash)>] CreateCdRom202Response data, response status code and response headers
    def create_cd_rom_with_http_info(vm_ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_cd_rom, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.create_cd_rom ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.create_cd_rom"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.create_cd_rom, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.create_cd_rom"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.create_cd_rom"
      end
      # verify the required parameter 'vmm_v40_ahv_config_cd_rom' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_cd_rom.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_cd_rom' when calling VmApi.create_cd_rom"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/cd-roms'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_cd_rom)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateCdRom202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.create_cd_rom",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#create_cd_rom\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a disk device for a VM
    # Creates and attaches a disk device to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_disk [VmmV40AhvConfigDisk] 
    # @param [Hash] opts the optional parameters
    # @return [CreateDisk202Response]
    def create_disk(vm_ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_disk, opts = {})
      data, _status_code, _headers = create_disk_with_http_info(vm_ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_disk, opts)
      data
    end

    # Create a disk device for a VM
    # Creates and attaches a disk device to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_disk [VmmV40AhvConfigDisk] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateDisk202Response, Integer, Hash)>] CreateDisk202Response data, response status code and response headers
    def create_disk_with_http_info(vm_ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_disk, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.create_disk ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.create_disk"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.create_disk, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.create_disk"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.create_disk"
      end
      # verify the required parameter 'vmm_v40_ahv_config_disk' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_disk.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_disk' when calling VmApi.create_disk"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/disks'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_disk)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateDisk202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.create_disk",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#create_disk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Attach a GPU device to a VM
    # Attaches a GPU device to a virtual machine
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_gpu [VmmV40AhvConfigGpu] 
    # @param [Hash] opts the optional parameters
    # @return [CreateGpu202Response]
    def create_gpu(vm_ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_gpu, opts = {})
      data, _status_code, _headers = create_gpu_with_http_info(vm_ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_gpu, opts)
      data
    end

    # Attach a GPU device to a VM
    # Attaches a GPU device to a virtual machine
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_gpu [VmmV40AhvConfigGpu] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateGpu202Response, Integer, Hash)>] CreateGpu202Response data, response status code and response headers
    def create_gpu_with_http_info(vm_ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_gpu, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.create_gpu ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.create_gpu"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.create_gpu, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.create_gpu"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.create_gpu"
      end
      # verify the required parameter 'vmm_v40_ahv_config_gpu' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_gpu.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_gpu' when calling VmApi.create_gpu"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/gpus'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_gpu)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateGpu202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.create_gpu",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#create_gpu\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a network device for a VM
    # Creates and attaches a network device to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_nic [VmmV40AhvConfigNic] 
    # @param [Hash] opts the optional parameters
    # @return [CreateNic202Response]
    def create_nic(vm_ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_nic, opts = {})
      data, _status_code, _headers = create_nic_with_http_info(vm_ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_nic, opts)
      data
    end

    # Create a network device for a VM
    # Creates and attaches a network device to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_nic [VmmV40AhvConfigNic] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateNic202Response, Integer, Hash)>] CreateNic202Response data, response status code and response headers
    def create_nic_with_http_info(vm_ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_nic, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.create_nic ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.create_nic"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.create_nic, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.create_nic"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.create_nic"
      end
      # verify the required parameter 'vmm_v40_ahv_config_nic' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_nic.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_nic' when calling VmApi.create_nic"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/nics'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_nic)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateNic202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.create_nic",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#create_nic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a PCIe device for a VM
    # Creates and attaches a PCIe device to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_pcie_device [VmmV40AhvConfigPcieDevice] 
    # @param [Hash] opts the optional parameters
    # @return [CreatePcieDevice202Response]
    def create_pcie_device(vm_ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_pcie_device, opts = {})
      data, _status_code, _headers = create_pcie_device_with_http_info(vm_ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_pcie_device, opts)
      data
    end

    # Create a PCIe device for a VM
    # Creates and attaches a PCIe device to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_pcie_device [VmmV40AhvConfigPcieDevice] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreatePcieDevice202Response, Integer, Hash)>] CreatePcieDevice202Response data, response status code and response headers
    def create_pcie_device_with_http_info(vm_ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_pcie_device, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.create_pcie_device ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.create_pcie_device"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.create_pcie_device, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.create_pcie_device"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.create_pcie_device"
      end
      # verify the required parameter 'vmm_v40_ahv_config_pcie_device' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_pcie_device.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_pcie_device' when calling VmApi.create_pcie_device"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/pcie-devices'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_pcie_device)

      # return_type
      return_type = opts[:debug_return_type] || 'CreatePcieDevice202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.create_pcie_device",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#create_pcie_device\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a serial port for a VM
    # Creates and attaches a serial port device to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_serial_port [VmmV40AhvConfigSerialPort] 
    # @param [Hash] opts the optional parameters
    # @return [CreateSerialPort202Response]
    def create_serial_port(vm_ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_serial_port, opts = {})
      data, _status_code, _headers = create_serial_port_with_http_info(vm_ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_serial_port, opts)
      data
    end

    # Create a serial port for a VM
    # Creates and attaches a serial port device to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_serial_port [VmmV40AhvConfigSerialPort] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateSerialPort202Response, Integer, Hash)>] CreateSerialPort202Response data, response status code and response headers
    def create_serial_port_with_http_info(vm_ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_serial_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.create_serial_port ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.create_serial_port"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.create_serial_port, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.create_serial_port"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.create_serial_port"
      end
      # verify the required parameter 'vmm_v40_ahv_config_serial_port' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_serial_port.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_serial_port' when calling VmApi.create_serial_port"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/serial-ports'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_serial_port)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateSerialPort202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.create_serial_port",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#create_serial_port\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a VM
    # Creates a Virtual Machine with the provided configuration.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_vm [VmmV40AhvConfigVm] 
    # @param [Hash] opts the optional parameters
    # @return [CreateVm202Response]
    def create_vm(ntnx_request_id, vmm_v40_ahv_config_vm, opts = {})
      data, _status_code, _headers = create_vm_with_http_info(ntnx_request_id, vmm_v40_ahv_config_vm, opts)
      data
    end

    # Create a VM
    # Creates a Virtual Machine with the provided configuration.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_vm [VmmV40AhvConfigVm] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateVm202Response, Integer, Hash)>] CreateVm202Response data, response status code and response headers
    def create_vm_with_http_info(ntnx_request_id, vmm_v40_ahv_config_vm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.create_vm ...'
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.create_vm"
      end
      # verify the required parameter 'vmm_v40_ahv_config_vm' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_vm.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_vm' when calling VmApi.create_vm"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_vm)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateVm202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.create_vm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#create_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Migrate a VM across clusters
    # Migrates a VM from the current cluster to a new target cluster. Supports the dry-run option, which if used results only in validation of the cross-cluster migration parameters and pre-requisites.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_vm_cross_cluster_migrate_params [VmmV40AhvConfigVmCrossClusterMigrateParams] Input on how to migrate a VM across clusters.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :dryrun A URL query parameter that allows long running operations to execute in a dry-run mode providing ability to identify trouble spots and system failures without performing the actual operation. Additionally this mode also offers a summary snapshot of the resultant system in order to better understand how things fit together. The operation runs in dry-run mode only if the provided value is true. 
    # @return [CrossClusterMigrateVm202Response]
    def cross_cluster_migrate_vm(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_vm_cross_cluster_migrate_params, opts = {})
      data, _status_code, _headers = cross_cluster_migrate_vm_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_vm_cross_cluster_migrate_params, opts)
      data
    end

    # Migrate a VM across clusters
    # Migrates a VM from the current cluster to a new target cluster. Supports the dry-run option, which if used results only in validation of the cross-cluster migration parameters and pre-requisites.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_vm_cross_cluster_migrate_params [VmmV40AhvConfigVmCrossClusterMigrateParams] Input on how to migrate a VM across clusters.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :dryrun A URL query parameter that allows long running operations to execute in a dry-run mode providing ability to identify trouble spots and system failures without performing the actual operation. Additionally this mode also offers a summary snapshot of the resultant system in order to better understand how things fit together. The operation runs in dry-run mode only if the provided value is true. 
    # @return [Array<(CrossClusterMigrateVm202Response, Integer, Hash)>] CrossClusterMigrateVm202Response data, response status code and response headers
    def cross_cluster_migrate_vm_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_vm_cross_cluster_migrate_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.cross_cluster_migrate_vm ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.cross_cluster_migrate_vm"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.cross_cluster_migrate_vm, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.cross_cluster_migrate_vm"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.cross_cluster_migrate_vm"
      end
      # verify the required parameter 'vmm_v40_ahv_config_vm_cross_cluster_migrate_params' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_vm_cross_cluster_migrate_params.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_vm_cross_cluster_migrate_params' when calling VmApi.cross_cluster_migrate_vm"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}/$actions/migrate'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$dryrun'] = opts[:'dryrun'] if !opts[:'dryrun'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_vm_cross_cluster_migrate_params)

      # return_type
      return_type = opts[:debug_return_type] || 'CrossClusterMigrateVm202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.cross_cluster_migrate_vm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#cross_cluster_migrate_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stage guest customization configuration details
    # Stage a Sysprep or cloud-init configuration file to be used by the guest for the next boot. Note that the Sysprep command must be used to generalize the Windows VMs before triggering this API call.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_guest_customization_params [VmmV40AhvConfigGuestCustomizationParams] 
    # @param [Hash] opts the optional parameters
    # @return [CustomizeGuestVm202Response]
    def customize_guest_vm(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_guest_customization_params, opts = {})
      data, _status_code, _headers = customize_guest_vm_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_guest_customization_params, opts)
      data
    end

    # Stage guest customization configuration details
    # Stage a Sysprep or cloud-init configuration file to be used by the guest for the next boot. Note that the Sysprep command must be used to generalize the Windows VMs before triggering this API call.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_guest_customization_params [VmmV40AhvConfigGuestCustomizationParams] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CustomizeGuestVm202Response, Integer, Hash)>] CustomizeGuestVm202Response data, response status code and response headers
    def customize_guest_vm_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_guest_customization_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.customize_guest_vm ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.customize_guest_vm"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.customize_guest_vm, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.customize_guest_vm"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.customize_guest_vm"
      end
      # verify the required parameter 'vmm_v40_ahv_config_guest_customization_params' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_guest_customization_params.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_guest_customization_params' when calling VmApi.customize_guest_vm"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}/$actions/customize-guest'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_guest_customization_params)

      # return_type
      return_type = opts[:debug_return_type] || 'CustomizeGuestVm202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.customize_guest_vm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#customize_guest_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a CD-ROM device from a VM
    # Removes the specified CD-ROM device from a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a CD-ROM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [DeleteCdRomById202Response]
    def delete_cd_rom_by_id(vm_ext_id, ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = delete_cd_rom_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Remove a CD-ROM device from a VM
    # Removes the specified CD-ROM device from a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a CD-ROM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteCdRomById202Response, Integer, Hash)>] DeleteCdRomById202Response data, response status code and response headers
    def delete_cd_rom_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.delete_cd_rom_by_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.delete_cd_rom_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.delete_cd_rom_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.delete_cd_rom_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.delete_cd_rom_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.delete_cd_rom_by_id"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.delete_cd_rom_by_id"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/cd-roms/{extId}'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteCdRomById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.delete_cd_rom_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#delete_cd_rom_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes the specified disk device from a virtual machine.
    # Removes the specified disk device from a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a VM disk of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [DeleteDiskById202Response]
    def delete_disk_by_id(vm_ext_id, ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = delete_disk_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Removes the specified disk device from a virtual machine.
    # Removes the specified disk device from a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a VM disk of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteDiskById202Response, Integer, Hash)>] DeleteDiskById202Response data, response status code and response headers
    def delete_disk_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.delete_disk_by_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.delete_disk_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.delete_disk_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.delete_disk_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.delete_disk_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.delete_disk_by_id"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.delete_disk_by_id"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/disks/{extId}'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteDiskById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.delete_disk_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#delete_disk_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a GPU device from a VM
    # Removes the specified GPU device from a virtual machine
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a VM GPU of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [DeleteGpuById202Response]
    def delete_gpu_by_id(vm_ext_id, ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = delete_gpu_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Remove a GPU device from a VM
    # Removes the specified GPU device from a virtual machine
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a VM GPU of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteGpuById202Response, Integer, Hash)>] DeleteGpuById202Response data, response status code and response headers
    def delete_gpu_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.delete_gpu_by_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.delete_gpu_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.delete_gpu_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.delete_gpu_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.delete_gpu_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.delete_gpu_by_id"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.delete_gpu_by_id"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/gpus/{extId}'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteGpuById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.delete_gpu_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#delete_gpu_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a network device from a VM
    # Removes the specified network device from a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a VM NIC of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [DeleteNicById202Response]
    def delete_nic_by_id(vm_ext_id, ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = delete_nic_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Remove a network device from a VM
    # Removes the specified network device from a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a VM NIC of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteNicById202Response, Integer, Hash)>] DeleteNicById202Response data, response status code and response headers
    def delete_nic_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.delete_nic_by_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.delete_nic_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.delete_nic_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.delete_nic_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.delete_nic_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.delete_nic_by_id"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.delete_nic_by_id"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/nics/{extId}'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteNicById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.delete_nic_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#delete_nic_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a PCIe device from a VM
    # Removes the specified PCIe device from a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] Globally unique identifier of a PCIe device  of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [DeletePcieDeviceById202Response]
    def delete_pcie_device_by_id(vm_ext_id, ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = delete_pcie_device_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Remove a PCIe device from a VM
    # Removes the specified PCIe device from a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] Globally unique identifier of a PCIe device  of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeletePcieDeviceById202Response, Integer, Hash)>] DeletePcieDeviceById202Response data, response status code and response headers
    def delete_pcie_device_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.delete_pcie_device_by_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.delete_pcie_device_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.delete_pcie_device_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.delete_pcie_device_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.delete_pcie_device_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.delete_pcie_device_by_id"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.delete_pcie_device_by_id"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/pcie-devices/{extId}'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeletePcieDeviceById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.delete_pcie_device_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#delete_pcie_device_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a serial port from a VM
    # Removes the specified serial port from a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] The globally unique identifier of a serial port of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [DeleteSerialPortById202Response]
    def delete_serial_port_by_id(vm_ext_id, ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = delete_serial_port_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Remove a serial port from a VM
    # Removes the specified serial port from a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] The globally unique identifier of a serial port of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteSerialPortById202Response, Integer, Hash)>] DeleteSerialPortById202Response data, response status code and response headers
    def delete_serial_port_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.delete_serial_port_by_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.delete_serial_port_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.delete_serial_port_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.delete_serial_port_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.delete_serial_port_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.delete_serial_port_by_id"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.delete_serial_port_by_id"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/serial-ports/{extId}'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteSerialPortById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.delete_serial_port_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#delete_serial_port_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a VM
    # Delete the specified virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [DeleteVmById202Response]
    def delete_vm_by_id(ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = delete_vm_by_id_with_http_info(ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Delete a VM
    # Delete the specified virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteVmById202Response, Integer, Hash)>] DeleteVmById202Response data, response status code and response headers
    def delete_vm_by_id_with_http_info(ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.delete_vm_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.delete_vm_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.delete_vm_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.delete_vm_by_id"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.delete_vm_by_id"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteVmById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.delete_vm_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#delete_vm_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disassociate categories from a VM
    # Disassociate categories from a virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_disassociate_vm_categories_params [VmmV40AhvConfigDisassociateVmCategoriesParams] 
    # @param [Hash] opts the optional parameters
    # @return [DisassociateCategories202Response1]
    def disassociate_categories(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_disassociate_vm_categories_params, opts = {})
      data, _status_code, _headers = disassociate_categories_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_disassociate_vm_categories_params, opts)
      data
    end

    # Disassociate categories from a VM
    # Disassociate categories from a virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_disassociate_vm_categories_params [VmmV40AhvConfigDisassociateVmCategoriesParams] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DisassociateCategories202Response1, Integer, Hash)>] DisassociateCategories202Response1 data, response status code and response headers
    def disassociate_categories_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_disassociate_vm_categories_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.disassociate_categories ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.disassociate_categories"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.disassociate_categories, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.disassociate_categories"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.disassociate_categories"
      end
      # verify the required parameter 'vmm_v40_ahv_config_disassociate_vm_categories_params' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_disassociate_vm_categories_params.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_disassociate_vm_categories_params' when calling VmApi.disassociate_categories"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}/$actions/disassociate-categories'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_disassociate_vm_categories_params)

      # return_type
      return_type = opts[:debug_return_type] || 'DisassociateCategories202Response1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.disassociate_categories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#disassociate_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Ejects an ISO from the provided CD-ROM device
    # Ejects the ISO currently inserted into a CD-ROM device on a Virtual Machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a CD-ROM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [EjectCdRomById202Response]
    def eject_cd_rom_by_id(vm_ext_id, ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = eject_cd_rom_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Ejects an ISO from the provided CD-ROM device
    # Ejects the ISO currently inserted into a CD-ROM device on a Virtual Machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a CD-ROM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EjectCdRomById202Response, Integer, Hash)>] EjectCdRomById202Response data, response status code and response headers
    def eject_cd_rom_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.eject_cd_rom_by_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.eject_cd_rom_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.eject_cd_rom_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.eject_cd_rom_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.eject_cd_rom_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.eject_cd_rom_by_id"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.eject_cd_rom_by_id"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/cd-roms/{extId}/$actions/eject'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EjectCdRomById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.eject_cd_rom_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#eject_cd_rom_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get configuration details for the provided CD-ROM
    # Retrieves configuration details for the provided CD-ROM device attached to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a CD-ROM of type UUID.
    # @param [Hash] opts the optional parameters
    # @return [GetCdRomById200Response]
    def get_cd_rom_by_id(vm_ext_id, ext_id, opts = {})
      data, _status_code, _headers = get_cd_rom_by_id_with_http_info(vm_ext_id, ext_id, opts)
      data
    end

    # Get configuration details for the provided CD-ROM
    # Retrieves configuration details for the provided CD-ROM device attached to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a CD-ROM of type UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetCdRomById200Response, Integer, Hash)>] GetCdRomById200Response data, response status code and response headers
    def get_cd_rom_by_id_with_http_info(vm_ext_id, ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.get_cd_rom_by_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.get_cd_rom_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.get_cd_rom_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.get_cd_rom_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.get_cd_rom_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/cd-roms/{extId}'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetCdRomById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.get_cd_rom_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#get_cd_rom_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get configuration details for the provided disk device
    # Retrieves configuration details for the provided disk device attached to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a VM disk of type UUID.
    # @param [Hash] opts the optional parameters
    # @return [GetDiskById200Response]
    def get_disk_by_id(vm_ext_id, ext_id, opts = {})
      data, _status_code, _headers = get_disk_by_id_with_http_info(vm_ext_id, ext_id, opts)
      data
    end

    # Get configuration details for the provided disk device
    # Retrieves configuration details for the provided disk device attached to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a VM disk of type UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetDiskById200Response, Integer, Hash)>] GetDiskById200Response data, response status code and response headers
    def get_disk_by_id_with_http_info(vm_ext_id, ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.get_disk_by_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.get_disk_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.get_disk_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.get_disk_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.get_disk_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/disks/{extId}'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetDiskById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.get_disk_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#get_disk_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get configuration details for the provided GPU device
    # Retrieves configuration details for the provided GPU device attached to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a VM GPU of type UUID.
    # @param [Hash] opts the optional parameters
    # @return [GetGpuById200Response]
    def get_gpu_by_id(vm_ext_id, ext_id, opts = {})
      data, _status_code, _headers = get_gpu_by_id_with_http_info(vm_ext_id, ext_id, opts)
      data
    end

    # Get configuration details for the provided GPU device
    # Retrieves configuration details for the provided GPU device attached to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a VM GPU of type UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetGpuById200Response, Integer, Hash)>] GetGpuById200Response data, response status code and response headers
    def get_gpu_by_id_with_http_info(vm_ext_id, ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.get_gpu_by_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.get_gpu_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.get_gpu_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.get_gpu_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.get_gpu_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/gpus/{extId}'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetGpuById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.get_gpu_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#get_gpu_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get VM NGT configuration
    # Retrieves the Nutanix Guest Tools configuration for a virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param [Hash] opts the optional parameters
    # @return [GetGuestToolsById200Response]
    def get_guest_tools_by_id(ext_id, opts = {})
      data, _status_code, _headers = get_guest_tools_by_id_with_http_info(ext_id, opts)
      data
    end

    # Get VM NGT configuration
    # Retrieves the Nutanix Guest Tools configuration for a virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetGuestToolsById200Response, Integer, Hash)>] GetGuestToolsById200Response data, response status code and response headers
    def get_guest_tools_by_id_with_http_info(ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.get_guest_tools_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.get_guest_tools_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.get_guest_tools_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}/guest-tools'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetGuestToolsById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.get_guest_tools_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#get_guest_tools_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get configuration details for the provided network device
    # Retrieves configuration details for the provided network device attached to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a VM NIC of type UUID.
    # @param [Hash] opts the optional parameters
    # @return [GetNicById200Response]
    def get_nic_by_id(vm_ext_id, ext_id, opts = {})
      data, _status_code, _headers = get_nic_by_id_with_http_info(vm_ext_id, ext_id, opts)
      data
    end

    # Get configuration details for the provided network device
    # Retrieves configuration details for the provided network device attached to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a VM NIC of type UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetNicById200Response, Integer, Hash)>] GetNicById200Response data, response status code and response headers
    def get_nic_by_id_with_http_info(vm_ext_id, ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.get_nic_by_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.get_nic_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.get_nic_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.get_nic_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.get_nic_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/nics/{extId}'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetNicById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.get_nic_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#get_nic_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get configuration details for the provided PCIe device
    # Retrieves configuration details for the provided PCIe device attached to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] Globally unique identifier of a PCIe device  of type UUID.
    # @param [Hash] opts the optional parameters
    # @return [GetPcieDeviceById200Response]
    def get_pcie_device_by_id(vm_ext_id, ext_id, opts = {})
      data, _status_code, _headers = get_pcie_device_by_id_with_http_info(vm_ext_id, ext_id, opts)
      data
    end

    # Get configuration details for the provided PCIe device
    # Retrieves configuration details for the provided PCIe device attached to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] Globally unique identifier of a PCIe device  of type UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPcieDeviceById200Response, Integer, Hash)>] GetPcieDeviceById200Response data, response status code and response headers
    def get_pcie_device_by_id_with_http_info(vm_ext_id, ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.get_pcie_device_by_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.get_pcie_device_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.get_pcie_device_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.get_pcie_device_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.get_pcie_device_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/pcie-devices/{extId}'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPcieDeviceById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.get_pcie_device_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#get_pcie_device_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get configuration details for the provided serial port
    # Retrieves configuration details for the provided serial port attached to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] The globally unique identifier of a serial port of type UUID.
    # @param [Hash] opts the optional parameters
    # @return [GetSerialPortById200Response]
    def get_serial_port_by_id(vm_ext_id, ext_id, opts = {})
      data, _status_code, _headers = get_serial_port_by_id_with_http_info(vm_ext_id, ext_id, opts)
      data
    end

    # Get configuration details for the provided serial port
    # Retrieves configuration details for the provided serial port attached to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] The globally unique identifier of a serial port of type UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSerialPortById200Response, Integer, Hash)>] GetSerialPortById200Response data, response status code and response headers
    def get_serial_port_by_id_with_http_info(vm_ext_id, ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.get_serial_port_by_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.get_serial_port_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.get_serial_port_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.get_serial_port_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.get_serial_port_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/serial-ports/{extId}'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSerialPortById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.get_serial_port_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#get_serial_port_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get VM configuration details
    # Retrieves configuration details for a virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param [Hash] opts the optional parameters
    # @return [GetVmById200Response1]
    def get_vm_by_id(ext_id, opts = {})
      data, _status_code, _headers = get_vm_by_id_with_http_info(ext_id, opts)
      data
    end

    # Get VM configuration details
    # Retrieves configuration details for a virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetVmById200Response1, Integer, Hash)>] GetVmById200Response1 data, response status code and response headers
    def get_vm_by_id_with_http_info(ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.get_vm_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.get_vm_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.get_vm_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVmById200Response1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.get_vm_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#get_vm_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Inserts an ISO in the provided CD-ROM device
    # Inserts the defined ISO into a CD-ROM device attached to a Virtual Machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a CD-ROM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_cd_rom_insert_params [VmmV40AhvConfigCdRomInsertParams] 
    # @param [Hash] opts the optional parameters
    # @return [InsertCdRomById202Response]
    def insert_cd_rom_by_id(vm_ext_id, ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_cd_rom_insert_params, opts = {})
      data, _status_code, _headers = insert_cd_rom_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_cd_rom_insert_params, opts)
      data
    end

    # Inserts an ISO in the provided CD-ROM device
    # Inserts the defined ISO into a CD-ROM device attached to a Virtual Machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a CD-ROM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_cd_rom_insert_params [VmmV40AhvConfigCdRomInsertParams] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InsertCdRomById202Response, Integer, Hash)>] InsertCdRomById202Response data, response status code and response headers
    def insert_cd_rom_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_cd_rom_insert_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.insert_cd_rom_by_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.insert_cd_rom_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.insert_cd_rom_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.insert_cd_rom_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.insert_cd_rom_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.insert_cd_rom_by_id"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.insert_cd_rom_by_id"
      end
      # verify the required parameter 'vmm_v40_ahv_config_cd_rom_insert_params' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_cd_rom_insert_params.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_cd_rom_insert_params' when calling VmApi.insert_cd_rom_by_id"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/cd-roms/{extId}/$actions/insert'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_cd_rom_insert_params)

      # return_type
      return_type = opts[:debug_return_type] || 'InsertCdRomById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.insert_cd_rom_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#insert_cd_rom_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Insert NGT ISO into an available CD-ROM for a VM
    # Inserts the Nutanix Guest Tools installation and configuration ISO into a virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_guest_tools_insert_config [VmmV40AhvConfigGuestToolsInsertConfig] 
    # @param [Hash] opts the optional parameters
    # @return [InsertVmGuestTools202Response]
    def insert_vm_guest_tools(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_guest_tools_insert_config, opts = {})
      data, _status_code, _headers = insert_vm_guest_tools_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_guest_tools_insert_config, opts)
      data
    end

    # Insert NGT ISO into an available CD-ROM for a VM
    # Inserts the Nutanix Guest Tools installation and configuration ISO into a virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_guest_tools_insert_config [VmmV40AhvConfigGuestToolsInsertConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InsertVmGuestTools202Response, Integer, Hash)>] InsertVmGuestTools202Response data, response status code and response headers
    def insert_vm_guest_tools_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_guest_tools_insert_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.insert_vm_guest_tools ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.insert_vm_guest_tools"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.insert_vm_guest_tools, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.insert_vm_guest_tools"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.insert_vm_guest_tools"
      end
      # verify the required parameter 'vmm_v40_ahv_config_guest_tools_insert_config' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_guest_tools_insert_config.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_guest_tools_insert_config' when calling VmApi.insert_vm_guest_tools"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}/guest-tools/$actions/insert-iso'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_guest_tools_insert_config)

      # return_type
      return_type = opts[:debug_return_type] || 'InsertVmGuestTools202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.insert_vm_guest_tools",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#insert_vm_guest_tools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Install NGT in a VM
    # Installs Nutanix Guest Tools in a Virtual Machine by using the provided credentials.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_guest_tools_install_config [VmmV40AhvConfigGuestToolsInstallConfig] 
    # @param [Hash] opts the optional parameters
    # @return [InstallVmGuestTools202Response]
    def install_vm_guest_tools(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_guest_tools_install_config, opts = {})
      data, _status_code, _headers = install_vm_guest_tools_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_guest_tools_install_config, opts)
      data
    end

    # Install NGT in a VM
    # Installs Nutanix Guest Tools in a Virtual Machine by using the provided credentials.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_guest_tools_install_config [VmmV40AhvConfigGuestToolsInstallConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InstallVmGuestTools202Response, Integer, Hash)>] InstallVmGuestTools202Response data, response status code and response headers
    def install_vm_guest_tools_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_guest_tools_install_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.install_vm_guest_tools ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.install_vm_guest_tools"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.install_vm_guest_tools, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.install_vm_guest_tools"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.install_vm_guest_tools"
      end
      # verify the required parameter 'vmm_v40_ahv_config_guest_tools_install_config' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_guest_tools_install_config.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_guest_tools_install_config' when calling VmApi.install_vm_guest_tools"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}/guest-tools/$actions/install'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_guest_tools_install_config)

      # return_type
      return_type = opts[:debug_return_type] || 'InstallVmGuestTools202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.install_vm_guest_tools",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#install_vm_guest_tools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List CD-ROMs attached to a VM
    # Lists the CD-ROM devices attached to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @return [ListCdRomsByVmId200Response]
    def list_cd_roms_by_vm_id(vm_ext_id, opts = {})
      data, _status_code, _headers = list_cd_roms_by_vm_id_with_http_info(vm_ext_id, opts)
      data
    end

    # List CD-ROMs attached to a VM
    # Lists the CD-ROM devices attached to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @return [Array<(ListCdRomsByVmId200Response, Integer, Hash)>] ListCdRomsByVmId200Response data, response status code and response headers
    def list_cd_roms_by_vm_id_with_http_info(vm_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.list_cd_roms_by_vm_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.list_cd_roms_by_vm_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.list_cd_roms_by_vm_id, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling VmApi.list_cd_roms_by_vm_id, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VmApi.list_cd_roms_by_vm_id, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VmApi.list_cd_roms_by_vm_id, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/cd-roms'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListCdRomsByVmId200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.list_cd_roms_by_vm_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#list_cd_roms_by_vm_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List disks attached to a VM
    # Lists the disk devices attached to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @return [ListDisksByVmId200Response]
    def list_disks_by_vm_id(vm_ext_id, opts = {})
      data, _status_code, _headers = list_disks_by_vm_id_with_http_info(vm_ext_id, opts)
      data
    end

    # List disks attached to a VM
    # Lists the disk devices attached to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @return [Array<(ListDisksByVmId200Response, Integer, Hash)>] ListDisksByVmId200Response data, response status code and response headers
    def list_disks_by_vm_id_with_http_info(vm_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.list_disks_by_vm_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.list_disks_by_vm_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.list_disks_by_vm_id, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling VmApi.list_disks_by_vm_id, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VmApi.list_disks_by_vm_id, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VmApi.list_disks_by_vm_id, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/disks'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListDisksByVmId200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.list_disks_by_vm_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#list_disks_by_vm_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List GPUs attached to a VM
    # Lists the GPU devices attached to a virtual machine
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - mode - vendor 
    # @return [ListGpusByVmId200Response]
    def list_gpus_by_vm_id(vm_ext_id, opts = {})
      data, _status_code, _headers = list_gpus_by_vm_id_with_http_info(vm_ext_id, opts)
      data
    end

    # List GPUs attached to a VM
    # Lists the GPU devices attached to a virtual machine
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - mode - vendor 
    # @return [Array<(ListGpusByVmId200Response, Integer, Hash)>] ListGpusByVmId200Response data, response status code and response headers
    def list_gpus_by_vm_id_with_http_info(vm_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.list_gpus_by_vm_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.list_gpus_by_vm_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.list_gpus_by_vm_id, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling VmApi.list_gpus_by_vm_id, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VmApi.list_gpus_by_vm_id, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VmApi.list_gpus_by_vm_id, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/gpus'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListGpusByVmId200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.list_gpus_by_vm_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#list_gpus_by_vm_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List network devices attached to a VM
    # Lists the network devices attached to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - networkInfo/subnet/extId 
    # @return [ListNicsByVmId200Response]
    def list_nics_by_vm_id(vm_ext_id, opts = {})
      data, _status_code, _headers = list_nics_by_vm_id_with_http_info(vm_ext_id, opts)
      data
    end

    # List network devices attached to a VM
    # Lists the network devices attached to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - networkInfo/subnet/extId 
    # @return [Array<(ListNicsByVmId200Response, Integer, Hash)>] ListNicsByVmId200Response data, response status code and response headers
    def list_nics_by_vm_id_with_http_info(vm_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.list_nics_by_vm_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.list_nics_by_vm_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.list_nics_by_vm_id, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling VmApi.list_nics_by_vm_id, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VmApi.list_nics_by_vm_id, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VmApi.list_nics_by_vm_id, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/nics'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListNicsByVmId200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.list_nics_by_vm_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#list_nics_by_vm_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List PCIe devices attached to a VM
    # Lists all the PCIe devices attached to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @return [ListPcieDevicesByVmId200Response]
    def list_pcie_devices_by_vm_id(vm_ext_id, opts = {})
      data, _status_code, _headers = list_pcie_devices_by_vm_id_with_http_info(vm_ext_id, opts)
      data
    end

    # List PCIe devices attached to a VM
    # Lists all the PCIe devices attached to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @return [Array<(ListPcieDevicesByVmId200Response, Integer, Hash)>] ListPcieDevicesByVmId200Response data, response status code and response headers
    def list_pcie_devices_by_vm_id_with_http_info(vm_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.list_pcie_devices_by_vm_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.list_pcie_devices_by_vm_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.list_pcie_devices_by_vm_id, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling VmApi.list_pcie_devices_by_vm_id, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VmApi.list_pcie_devices_by_vm_id, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VmApi.list_pcie_devices_by_vm_id, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/pcie-devices'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListPcieDevicesByVmId200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.list_pcie_devices_by_vm_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#list_pcie_devices_by_vm_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List serial ports attached to a VM
    # Lists the serial ports attached to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @return [ListSerialPortsByVmId200Response]
    def list_serial_ports_by_vm_id(vm_ext_id, opts = {})
      data, _status_code, _headers = list_serial_ports_by_vm_id_with_http_info(vm_ext_id, opts)
      data
    end

    # List serial ports attached to a VM
    # Lists the serial ports attached to a virtual machine.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @return [Array<(ListSerialPortsByVmId200Response, Integer, Hash)>] ListSerialPortsByVmId200Response data, response status code and response headers
    def list_serial_ports_by_vm_id_with_http_info(vm_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.list_serial_ports_by_vm_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.list_serial_ports_by_vm_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.list_serial_ports_by_vm_id, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling VmApi.list_serial_ports_by_vm_id, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VmApi.list_serial_ports_by_vm_id, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VmApi.list_serial_ports_by_vm_id, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/serial-ports'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListSerialPortsByVmId200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.list_serial_ports_by_vm_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#list_serial_ports_by_vm_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List VMs
    # Lists the Virtual Machines defined on the system. List of Virtual Machines can be further filtered out using various filtering options.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - apcConfig/cpuModel/extId - apcConfig/cpuModel/name - apcConfig/isApcEnabled - cluster/extId - extId - gpus - hardwareClockTimezone - host/extId - isAgentVm - isCpuHotplugEnabled - isCpuPassthroughEnabled - isGpuConsoleEnabled - isLiveMigrateCapable - isMemoryOvercommitEnabled - isScsiControllerEnabled - isVcpuHardPinningEnabled - isVgaConsoleEnabled - machineType - memorySizeBytes - name - nics - numCoresPerSocket - numNumaNodes - numSockets - numThreadsPerCore - powerState 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - memorySizeBytes - name - numCoresPerSocket - numNumaNodes - numSockets - numThreadsPerCore 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - apcConfig/cpuModel/extId - apcConfig/cpuModel/name - apcConfig/isApcEnabled - availabilityZone - biosUuid - bootConfig - categories - cdRoms - cluster/extId - createTime - description - disks - enabledCpuFeatures - extId - generationUuid - gpus - guestCustomization - guestTools - hardwareClockTimezone - host/extId - isAgentVm - isBrandingEnabled - isCpuHotplugEnabled - isCpuPassthroughEnabled - isCrossClusterMigrationInProgress - isGpuConsoleEnabled - isLiveMigrateCapable - isMemoryOvercommitEnabled - isScsiControllerEnabled - isVcpuHardPinningEnabled - isVgaConsoleEnabled - links - machineType - memorySizeBytes - name - nics - numCoresPerSocket - numNumaNodes - numSockets - numThreadsPerCore - ownershipInfo - pcieDevices - powerState - protectionPolicyState - protectionType - serialPorts - source - storageConfig - tenantId - updateTime - vtpmConfig 
    # @return [ListVms200Response1]
    def list_vms(opts = {})
      data, _status_code, _headers = list_vms_with_http_info(opts)
      data
    end

    # List VMs
    # Lists the Virtual Machines defined on the system. List of Virtual Machines can be further filtered out using various filtering options.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - apcConfig/cpuModel/extId - apcConfig/cpuModel/name - apcConfig/isApcEnabled - cluster/extId - extId - gpus - hardwareClockTimezone - host/extId - isAgentVm - isCpuHotplugEnabled - isCpuPassthroughEnabled - isGpuConsoleEnabled - isLiveMigrateCapable - isMemoryOvercommitEnabled - isScsiControllerEnabled - isVcpuHardPinningEnabled - isVgaConsoleEnabled - machineType - memorySizeBytes - name - nics - numCoresPerSocket - numNumaNodes - numSockets - numThreadsPerCore - powerState 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - memorySizeBytes - name - numCoresPerSocket - numNumaNodes - numSockets - numThreadsPerCore 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - apcConfig/cpuModel/extId - apcConfig/cpuModel/name - apcConfig/isApcEnabled - availabilityZone - biosUuid - bootConfig - categories - cdRoms - cluster/extId - createTime - description - disks - enabledCpuFeatures - extId - generationUuid - gpus - guestCustomization - guestTools - hardwareClockTimezone - host/extId - isAgentVm - isBrandingEnabled - isCpuHotplugEnabled - isCpuPassthroughEnabled - isCrossClusterMigrationInProgress - isGpuConsoleEnabled - isLiveMigrateCapable - isMemoryOvercommitEnabled - isScsiControllerEnabled - isVcpuHardPinningEnabled - isVgaConsoleEnabled - links - machineType - memorySizeBytes - name - nics - numCoresPerSocket - numNumaNodes - numSockets - numThreadsPerCore - ownershipInfo - pcieDevices - powerState - protectionPolicyState - protectionType - serialPorts - source - storageConfig - tenantId - updateTime - vtpmConfig 
    # @return [Array<(ListVms200Response1, Integer, Hash)>] ListVms200Response1 data, response status code and response headers
    def list_vms_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.list_vms ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling VmApi.list_vms, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VmApi.list_vms, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VmApi.list_vms, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListVms200Response1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.list_vms",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#list_vms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Migrate a network device to another subnet
    # Migrates a network device attached to a Virtual Machine to another subnet. This can be used to move network devices between VLAN and VPC subnets.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a VM NIC of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_migrate_nic_config [VmmV40AhvConfigMigrateNicConfig] 
    # @param [Hash] opts the optional parameters
    # @return [MigrateNicById202Response]
    def migrate_nic_by_id(vm_ext_id, ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_migrate_nic_config, opts = {})
      data, _status_code, _headers = migrate_nic_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_migrate_nic_config, opts)
      data
    end

    # Migrate a network device to another subnet
    # Migrates a network device attached to a Virtual Machine to another subnet. This can be used to move network devices between VLAN and VPC subnets.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a VM NIC of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_migrate_nic_config [VmmV40AhvConfigMigrateNicConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MigrateNicById202Response, Integer, Hash)>] MigrateNicById202Response data, response status code and response headers
    def migrate_nic_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_migrate_nic_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.migrate_nic_by_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.migrate_nic_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.migrate_nic_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.migrate_nic_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.migrate_nic_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.migrate_nic_by_id"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.migrate_nic_by_id"
      end
      # verify the required parameter 'vmm_v40_ahv_config_migrate_nic_config' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_migrate_nic_config.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_migrate_nic_config' when calling VmApi.migrate_nic_by_id"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/nics/{extId}/$actions/migrate'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_migrate_nic_config)

      # return_type
      return_type = opts[:debug_return_type] || 'MigrateNicById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.migrate_nic_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#migrate_nic_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # VmDisk migration between storage containers
    # Specifies the VmDisks of a VM for migration and the migration plan for them. If all the disks of a VM need to be migrated to the same storage container, only a single migration plan with only the external ID of the destination storage container is needed.  If the disks are being migrated to different containers, one plan per disk needs to be specified.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_disk_migration_params [VmmV40AhvConfigDiskMigrationParams] 
    # @param [Hash] opts the optional parameters
    # @return [MigrateVmDisks202Response]
    def migrate_vm_disks(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_disk_migration_params, opts = {})
      data, _status_code, _headers = migrate_vm_disks_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_disk_migration_params, opts)
      data
    end

    # VmDisk migration between storage containers
    # Specifies the VmDisks of a VM for migration and the migration plan for them. If all the disks of a VM need to be migrated to the same storage container, only a single migration plan with only the external ID of the destination storage container is needed.  If the disks are being migrated to different containers, one plan per disk needs to be specified.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_disk_migration_params [VmmV40AhvConfigDiskMigrationParams] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MigrateVmDisks202Response, Integer, Hash)>] MigrateVmDisks202Response data, response status code and response headers
    def migrate_vm_disks_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_disk_migration_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.migrate_vm_disks ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.migrate_vm_disks"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.migrate_vm_disks, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.migrate_vm_disks"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.migrate_vm_disks"
      end
      # verify the required parameter 'vmm_v40_ahv_config_disk_migration_params' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_disk_migration_params.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_disk_migration_params' when calling VmApi.migrate_vm_disks"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}/$actions/migrate-vm-disks'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_disk_migration_params)

      # return_type
      return_type = opts[:debug_return_type] || 'MigrateVmDisks202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.migrate_vm_disks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#migrate_vm_disks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Host to host VM migration
    # Migrate a VM to another host within the same cluster.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_vm_migrate_to_host_params [VmmV40AhvConfigVmMigrateToHostParams] The request body for migrating a VM from one host to another within a cluster.
    # @param [Hash] opts the optional parameters
    # @return [MigrateVmToHost202Response]
    def migrate_vm_to_host(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_vm_migrate_to_host_params, opts = {})
      data, _status_code, _headers = migrate_vm_to_host_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_vm_migrate_to_host_params, opts)
      data
    end

    # Host to host VM migration
    # Migrate a VM to another host within the same cluster.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_vm_migrate_to_host_params [VmmV40AhvConfigVmMigrateToHostParams] The request body for migrating a VM from one host to another within a cluster.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MigrateVmToHost202Response, Integer, Hash)>] MigrateVmToHost202Response data, response status code and response headers
    def migrate_vm_to_host_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_vm_migrate_to_host_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.migrate_vm_to_host ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.migrate_vm_to_host"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.migrate_vm_to_host, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.migrate_vm_to_host"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.migrate_vm_to_host"
      end
      # verify the required parameter 'vmm_v40_ahv_config_vm_migrate_to_host_params' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_vm_migrate_to_host_params.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_vm_migrate_to_host_params' when calling VmApi.migrate_vm_to_host"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}/$actions/migrate-to-host'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_vm_migrate_to_host_params)

      # return_type
      return_type = opts[:debug_return_type] || 'MigrateVmToHost202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.migrate_vm_to_host",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#migrate_vm_to_host\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Force a power cycle for a VM
    # Force a power-cycle for a virtual machine. This operation is equivalent to requesting a VM power-off followed by the VM power-on. Power cycling a VM is slower than resetting it, but it will be creating a fresh instance of the virtual machine. When resetting, the same instance is restarted within the context of the running VM instance.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [PowerCycleVm202Response]
    def power_cycle_vm(ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = power_cycle_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Force a power cycle for a VM
    # Force a power-cycle for a virtual machine. This operation is equivalent to requesting a VM power-off followed by the VM power-on. Power cycling a VM is slower than resetting it, but it will be creating a fresh instance of the virtual machine. When resetting, the same instance is restarted within the context of the running VM instance.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PowerCycleVm202Response, Integer, Hash)>] PowerCycleVm202Response data, response status code and response headers
    def power_cycle_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.power_cycle_vm ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.power_cycle_vm"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.power_cycle_vm, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.power_cycle_vm"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.power_cycle_vm"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}/$actions/power-cycle'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PowerCycleVm202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.power_cycle_vm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#power_cycle_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Force power off a VM
    # Forceably shuts down a virtual machine which is equivalent to removing the power cable. Note: The forced shutdown may result in data loss if any operations are in progress during the shutdown.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [PowerOffVm202Response1]
    def power_off_vm(ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = power_off_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Force power off a VM
    # Forceably shuts down a virtual machine which is equivalent to removing the power cable. Note: The forced shutdown may result in data loss if any operations are in progress during the shutdown.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PowerOffVm202Response1, Integer, Hash)>] PowerOffVm202Response1 data, response status code and response headers
    def power_off_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.power_off_vm ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.power_off_vm"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.power_off_vm, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.power_off_vm"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.power_off_vm"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}/$actions/power-off'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PowerOffVm202Response1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.power_off_vm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#power_off_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Turn on a VM
    # Turns a Virtual Machine on.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [PowerOnVm202Response1]
    def power_on_vm(ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = power_on_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Turn on a VM
    # Turns a Virtual Machine on.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PowerOnVm202Response1, Integer, Hash)>] PowerOnVm202Response1 data, response status code and response headers
    def power_on_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.power_on_vm ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.power_on_vm"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.power_on_vm, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.power_on_vm"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.power_on_vm"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}/$actions/power-on'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PowerOnVm202Response1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.power_on_vm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#power_on_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Restart the VM using NGT
    # Collaborative reboot of a Virtual Machine, requesting Nutanix Guest Tools to trigger a reboot from within the VM.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_guest_power_options [VmmV40AhvConfigGuestPowerOptions] 
    # @param [Hash] opts the optional parameters
    # @return [RebootVm202Response]
    def reboot_guest_vm(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_guest_power_options, opts = {})
      data, _status_code, _headers = reboot_guest_vm_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_guest_power_options, opts)
      data
    end

    # Restart the VM using NGT
    # Collaborative reboot of a Virtual Machine, requesting Nutanix Guest Tools to trigger a reboot from within the VM.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_guest_power_options [VmmV40AhvConfigGuestPowerOptions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RebootVm202Response, Integer, Hash)>] RebootVm202Response data, response status code and response headers
    def reboot_guest_vm_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_guest_power_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.reboot_guest_vm ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.reboot_guest_vm"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.reboot_guest_vm, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.reboot_guest_vm"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.reboot_guest_vm"
      end
      # verify the required parameter 'vmm_v40_ahv_config_guest_power_options' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_guest_power_options.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_guest_power_options' when calling VmApi.reboot_guest_vm"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}/$actions/guest-reboot'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_guest_power_options)

      # return_type
      return_type = opts[:debug_return_type] || 'RebootVm202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.reboot_guest_vm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#reboot_guest_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reboot a VM using ACPI
    # Collaborative reboot of a Virtual Machine through the ACPI support in the operating system.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [RebootVm202Response]
    def reboot_vm(ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = reboot_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Reboot a VM using ACPI
    # Collaborative reboot of a Virtual Machine through the ACPI support in the operating system.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RebootVm202Response, Integer, Hash)>] RebootVm202Response data, response status code and response headers
    def reboot_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.reboot_vm ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.reboot_vm"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.reboot_vm, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.reboot_vm"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.reboot_vm"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}/$actions/reboot'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RebootVm202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.reboot_vm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#reboot_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Release an assigned IP address from the provided network device
    # Releases the IP address assignment from a network device attached to a managed network.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a VM NIC of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [ReleaseIpById202Response]
    def release_ip_by_id(vm_ext_id, ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = release_ip_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Release an assigned IP address from the provided network device
    # Releases the IP address assignment from a network device attached to a managed network.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a VM NIC of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReleaseIpById202Response, Integer, Hash)>] ReleaseIpById202Response data, response status code and response headers
    def release_ip_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.release_ip_by_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.release_ip_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.release_ip_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.release_ip_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.release_ip_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.release_ip_by_id"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.release_ip_by_id"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/nics/{extId}/$actions/release-ip'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReleaseIpById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.release_ip_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#release_ip_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset a VM immediately
    # Force reset of a Virtual Machine, without waiting for the guest VM to shutdown itself. Resetting a VM is faster than power-cycle as the reset occurs within the context of the running virtual machine instance rather than creating a fresh instance.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [ResetVm202Response1]
    def reset_vm(ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = reset_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Reset a VM immediately
    # Force reset of a Virtual Machine, without waiting for the guest VM to shutdown itself. Resetting a VM is faster than power-cycle as the reset occurs within the context of the running virtual machine instance rather than creating a fresh instance.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResetVm202Response1, Integer, Hash)>] ResetVm202Response1 data, response status code and response headers
    def reset_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.reset_vm ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.reset_vm"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.reset_vm, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.reset_vm"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.reset_vm"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}/$actions/reset'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResetVm202Response1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.reset_vm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#reset_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Revert the AHV VM.
    # Revert VM identified by {extId}. This does an in-place VM restore from a specified VM Recovery Point.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_revert_params [VmmV40AhvConfigRevertParams] 
    # @param [Hash] opts the optional parameters
    # @return [RevertVm202Response1]
    def revert_vm(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_revert_params, opts = {})
      data, _status_code, _headers = revert_vm_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_revert_params, opts)
      data
    end

    # Revert the AHV VM.
    # Revert VM identified by {extId}. This does an in-place VM restore from a specified VM Recovery Point.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_revert_params [VmmV40AhvConfigRevertParams] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RevertVm202Response1, Integer, Hash)>] RevertVm202Response1 data, response status code and response headers
    def revert_vm_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_revert_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.revert_vm ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.revert_vm"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.revert_vm, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.revert_vm"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.revert_vm"
      end
      # verify the required parameter 'vmm_v40_ahv_config_revert_params' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_revert_params.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_revert_params' when calling VmApi.revert_vm"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}/$actions/revert'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_revert_params)

      # return_type
      return_type = opts[:debug_return_type] || 'RevertVm202Response1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.revert_vm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#revert_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Shutdown the VM using NGT
    # Collaborative shutdown of a Virtual Machine, requesting Nutanix Guest Tools to trigger a shutdown from within the VM.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_guest_power_options [VmmV40AhvConfigGuestPowerOptions] 
    # @param [Hash] opts the optional parameters
    # @return [ShutdownVm202Response]
    def shutdown_guest_vm(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_guest_power_options, opts = {})
      data, _status_code, _headers = shutdown_guest_vm_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_guest_power_options, opts)
      data
    end

    # Shutdown the VM using NGT
    # Collaborative shutdown of a Virtual Machine, requesting Nutanix Guest Tools to trigger a shutdown from within the VM.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_guest_power_options [VmmV40AhvConfigGuestPowerOptions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShutdownVm202Response, Integer, Hash)>] ShutdownVm202Response data, response status code and response headers
    def shutdown_guest_vm_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_guest_power_options, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.shutdown_guest_vm ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.shutdown_guest_vm"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.shutdown_guest_vm, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.shutdown_guest_vm"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.shutdown_guest_vm"
      end
      # verify the required parameter 'vmm_v40_ahv_config_guest_power_options' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_guest_power_options.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_guest_power_options' when calling VmApi.shutdown_guest_vm"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}/$actions/guest-shutdown'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_guest_power_options)

      # return_type
      return_type = opts[:debug_return_type] || 'ShutdownVm202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.shutdown_guest_vm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#shutdown_guest_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Shutdown the VM using ACPI
    # Collaborative shutdown of a Virtual Machine through the ACPI support in the operating system.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [ShutdownVm202Response]
    def shutdown_vm(ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = shutdown_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Shutdown the VM using ACPI
    # Collaborative shutdown of a Virtual Machine through the ACPI support in the operating system.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShutdownVm202Response, Integer, Hash)>] ShutdownVm202Response data, response status code and response headers
    def shutdown_vm_with_http_info(ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.shutdown_vm ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.shutdown_vm"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.shutdown_vm, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.shutdown_vm"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.shutdown_vm"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}/$actions/shutdown'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ShutdownVm202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.shutdown_vm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#shutdown_vm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Uninstall NGT from a VM
    # Trigger an in-guest uninstallation of Nutanix Guest Tools.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [UninstallVmGuestTools202Response]
    def uninstall_vm_guest_tools(ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = uninstall_vm_guest_tools_with_http_info(ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Uninstall NGT from a VM
    # Trigger an in-guest uninstallation of Nutanix Guest Tools.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UninstallVmGuestTools202Response, Integer, Hash)>] UninstallVmGuestTools202Response data, response status code and response headers
    def uninstall_vm_guest_tools_with_http_info(ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.uninstall_vm_guest_tools ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.uninstall_vm_guest_tools"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.uninstall_vm_guest_tools, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.uninstall_vm_guest_tools"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.uninstall_vm_guest_tools"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}/guest-tools/$actions/uninstall'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UninstallVmGuestTools202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.uninstall_vm_guest_tools",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#uninstall_vm_guest_tools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the configuration for the provided disk device
    # Updates the configuration details for the provided disk device.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a VM disk of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_disk [VmmV40AhvConfigDisk] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateDiskById202Response]
    def update_disk_by_id(vm_ext_id, ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_disk, opts = {})
      data, _status_code, _headers = update_disk_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_disk, opts)
      data
    end

    # Update the configuration for the provided disk device
    # Updates the configuration details for the provided disk device.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a VM disk of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_disk [VmmV40AhvConfigDisk] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateDiskById202Response, Integer, Hash)>] UpdateDiskById202Response data, response status code and response headers
    def update_disk_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_disk, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.update_disk_by_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.update_disk_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.update_disk_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.update_disk_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.update_disk_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.update_disk_by_id"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.update_disk_by_id"
      end
      # verify the required parameter 'vmm_v40_ahv_config_disk' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_disk.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_disk' when calling VmApi.update_disk_by_id"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/disks/{extId}'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_disk)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateDiskById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.update_disk_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#update_disk_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update NGT configuration for a VM
    # Updates the Nutanix Guest Tools configuration for a virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_guest_tools [VmmV40AhvConfigGuestTools] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateGuestToolsById202Response]
    def update_guest_tools_by_id(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_guest_tools, opts = {})
      data, _status_code, _headers = update_guest_tools_by_id_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_guest_tools, opts)
      data
    end

    # Update NGT configuration for a VM
    # Updates the Nutanix Guest Tools configuration for a virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_guest_tools [VmmV40AhvConfigGuestTools] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateGuestToolsById202Response, Integer, Hash)>] UpdateGuestToolsById202Response data, response status code and response headers
    def update_guest_tools_by_id_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_guest_tools, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.update_guest_tools_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.update_guest_tools_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.update_guest_tools_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.update_guest_tools_by_id"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.update_guest_tools_by_id"
      end
      # verify the required parameter 'vmm_v40_ahv_config_guest_tools' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_guest_tools.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_guest_tools' when calling VmApi.update_guest_tools_by_id"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}/guest-tools'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_guest_tools)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateGuestToolsById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.update_guest_tools_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#update_guest_tools_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the configuration for the provided network device
    # Updates the configuration details for the provided network device.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a VM NIC of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_nic [VmmV40AhvConfigNic] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateNicById202Response]
    def update_nic_by_id(vm_ext_id, ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_nic, opts = {})
      data, _status_code, _headers = update_nic_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_nic, opts)
      data
    end

    # Update the configuration for the provided network device
    # Updates the configuration details for the provided network device.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] A globally unique identifier of a VM NIC of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_nic [VmmV40AhvConfigNic] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateNicById202Response, Integer, Hash)>] UpdateNicById202Response data, response status code and response headers
    def update_nic_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_nic, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.update_nic_by_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.update_nic_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.update_nic_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.update_nic_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.update_nic_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.update_nic_by_id"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.update_nic_by_id"
      end
      # verify the required parameter 'vmm_v40_ahv_config_nic' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_nic.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_nic' when calling VmApi.update_nic_by_id"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/nics/{extId}'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_nic)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateNicById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.update_nic_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#update_nic_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the configuration for the provided serial port
    # Updates the configuration details for the provided serial port.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] The globally unique identifier of a serial port of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_serial_port [VmmV40AhvConfigSerialPort] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateSerialPortById202Response]
    def update_serial_port_by_id(vm_ext_id, ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_serial_port, opts = {})
      data, _status_code, _headers = update_serial_port_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_serial_port, opts)
      data
    end

    # Update the configuration for the provided serial port
    # Updates the configuration details for the provided serial port.
    # @param vm_ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param ext_id [String] The globally unique identifier of a serial port of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_serial_port [VmmV40AhvConfigSerialPort] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateSerialPortById202Response, Integer, Hash)>] UpdateSerialPortById202Response data, response status code and response headers
    def update_serial_port_by_id_with_http_info(vm_ext_id, ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_serial_port, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.update_serial_port_by_id ...'
      end
      # verify the required parameter 'vm_ext_id' is set
      if @api_client.config.client_side_validation && vm_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_ext_id' when calling VmApi.update_serial_port_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_ext_id' when calling VmApi.update_serial_port_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.update_serial_port_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.update_serial_port_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.update_serial_port_by_id"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.update_serial_port_by_id"
      end
      # verify the required parameter 'vmm_v40_ahv_config_serial_port' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_serial_port.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_serial_port' when calling VmApi.update_serial_port_by_id"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{vmExtId}/serial-ports/{extId}'.sub('{' + 'vmExtId' + '}', CGI.escape(vm_ext_id.to_s)).sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_serial_port)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateSerialPortById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.update_serial_port_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#update_serial_port_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update configuration for a VM
    # Updates configuration details for a virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_vm [VmmV40AhvConfigVm] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateVmById202Response]
    def update_vm_by_id(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_vm, opts = {})
      data, _status_code, _headers = update_vm_by_id_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_vm, opts)
      data
    end

    # Update configuration for a VM
    # Updates configuration details for a virtual machine.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_vm [VmmV40AhvConfigVm] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateVmById202Response, Integer, Hash)>] UpdateVmById202Response data, response status code and response headers
    def update_vm_by_id_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_vm, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.update_vm_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.update_vm_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.update_vm_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.update_vm_by_id"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.update_vm_by_id"
      end
      # verify the required parameter 'vmm_v40_ahv_config_vm' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_vm.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_vm' when calling VmApi.update_vm_by_id"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_vm)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateVmById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.update_vm_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#update_vm_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upgrade NGT inside a VM
    # Trigger an in-guest upgrade of Nutanix Guest Tools.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_guest_tools_upgrade_config [VmmV40AhvConfigGuestToolsUpgradeConfig] 
    # @param [Hash] opts the optional parameters
    # @return [UpgradeVmGuestTools202Response]
    def upgrade_vm_guest_tools(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_guest_tools_upgrade_config, opts = {})
      data, _status_code, _headers = upgrade_vm_guest_tools_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_guest_tools_upgrade_config, opts)
      data
    end

    # Upgrade NGT inside a VM
    # Trigger an in-guest upgrade of Nutanix Guest Tools.
    # @param ext_id [String] A globally unique identifier of a VM of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_config_guest_tools_upgrade_config [VmmV40AhvConfigGuestToolsUpgradeConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpgradeVmGuestTools202Response, Integer, Hash)>] UpgradeVmGuestTools202Response data, response status code and response headers
    def upgrade_vm_guest_tools_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_config_guest_tools_upgrade_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmApi.upgrade_vm_guest_tools ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmApi.upgrade_vm_guest_tools"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmApi.upgrade_vm_guest_tools, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmApi.upgrade_vm_guest_tools"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmApi.upgrade_vm_guest_tools"
      end
      # verify the required parameter 'vmm_v40_ahv_config_guest_tools_upgrade_config' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_config_guest_tools_upgrade_config.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_config_guest_tools_upgrade_config' when calling VmApi.upgrade_vm_guest_tools"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/config/vms/{extId}/guest-tools/$actions/upgrade'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_config_guest_tools_upgrade_config)

      # return_type
      return_type = opts[:debug_return_type] || 'UpgradeVmGuestTools202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmApi.upgrade_vm_guest_tools",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmApi#upgrade_vm_guest_tools\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
