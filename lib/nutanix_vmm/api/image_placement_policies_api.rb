=begin
#Nutanix Virtual Machine Management APIs

#Manage the life-cycle of virtual machines hosted on Nutanix

The version of the OpenAPI document: 4.0

Generated by: https://openapi-generator.tech
Generator version: 7.16.0

=end

require 'cgi'

module NutanixVmm
  class ImagePlacementPoliciesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an image placement policy
    # Creates an image placement policy using the provided request body. The name, placement type, cluster entity filter and image entity filter are mandatory fields for creating an image placement policy. 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_images_config_placement_policy [VmmV40ImagesConfigPlacementPolicy] Request to create an image placement policy.
    # @param [Hash] opts the optional parameters
    # @return [CreatePlacementPolicy202Response]
    def create_placement_policy(ntnx_request_id, vmm_v40_images_config_placement_policy, opts = {})
      data, _status_code, _headers = create_placement_policy_with_http_info(ntnx_request_id, vmm_v40_images_config_placement_policy, opts)
      data
    end

    # Create an image placement policy
    # Creates an image placement policy using the provided request body. The name, placement type, cluster entity filter and image entity filter are mandatory fields for creating an image placement policy. 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_images_config_placement_policy [VmmV40ImagesConfigPlacementPolicy] Request to create an image placement policy.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreatePlacementPolicy202Response, Integer, Hash)>] CreatePlacementPolicy202Response data, response status code and response headers
    def create_placement_policy_with_http_info(ntnx_request_id, vmm_v40_images_config_placement_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagePlacementPoliciesApi.create_placement_policy ...'
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling ImagePlacementPoliciesApi.create_placement_policy"
      end
      # verify the required parameter 'vmm_v40_images_config_placement_policy' is set
      if @api_client.config.client_side_validation && vmm_v40_images_config_placement_policy.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_images_config_placement_policy' when calling ImagePlacementPoliciesApi.create_placement_policy"
      end
      # resource path
      local_var_path = '/vmm/v4.0/images/config/placement-policies'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_images_config_placement_policy)

      # return_type
      return_type = opts[:debug_return_type] || 'CreatePlacementPolicy202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ImagePlacementPoliciesApi.create_placement_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagePlacementPoliciesApi#create_placement_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an image placement policy
    # Deletes the image placement policy with the given external identifier.
    # @param ext_id [String] The external identifier of image placement policy.
    # @param [Hash] opts the optional parameters
    # @return [DeletePlacementPolicyById202Response]
    def delete_placement_policy_by_id(ext_id, opts = {})
      data, _status_code, _headers = delete_placement_policy_by_id_with_http_info(ext_id, opts)
      data
    end

    # Delete an image placement policy
    # Deletes the image placement policy with the given external identifier.
    # @param ext_id [String] The external identifier of image placement policy.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeletePlacementPolicyById202Response, Integer, Hash)>] DeletePlacementPolicyById202Response data, response status code and response headers
    def delete_placement_policy_by_id_with_http_info(ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagePlacementPoliciesApi.delete_placement_policy_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ImagePlacementPoliciesApi.delete_placement_policy_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ImagePlacementPoliciesApi.delete_placement_policy_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vmm/v4.0/images/config/placement-policies/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeletePlacementPolicyById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ImagePlacementPoliciesApi.delete_placement_policy_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagePlacementPoliciesApi#delete_placement_policy_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an image placement policy
    # Retrieves the image placement policy details for the provided external identifier.
    # @param ext_id [String] The external identifier of image placement policy.
    # @param [Hash] opts the optional parameters
    # @return [GetPlacementPolicyById200Response]
    def get_placement_policy_by_id(ext_id, opts = {})
      data, _status_code, _headers = get_placement_policy_by_id_with_http_info(ext_id, opts)
      data
    end

    # Get an image placement policy
    # Retrieves the image placement policy details for the provided external identifier.
    # @param ext_id [String] The external identifier of image placement policy.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPlacementPolicyById200Response, Integer, Hash)>] GetPlacementPolicyById200Response data, response status code and response headers
    def get_placement_policy_by_id_with_http_info(ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagePlacementPoliciesApi.get_placement_policy_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ImagePlacementPoliciesApi.get_placement_policy_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ImagePlacementPoliciesApi.get_placement_policy_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vmm/v4.0/images/config/placement-policies/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPlacementPolicyById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ImagePlacementPoliciesApi.get_placement_policy_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagePlacementPoliciesApi#get_placement_policy_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List image placement policies
    # Lists image placement policies created in Prism Central, along with details such as name, description, and so on. This API supports operations such as filtering, sorting, selection, and pagination. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - description - enforcementState - name 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - description - enforcementState - name 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - createTime - description - enforcementState - extId - lastUpdateTime - links - name - ownerExtId - placementType - tenantId 
    # @return [ListPlacementPolicies200Response]
    def list_placement_policies(opts = {})
      data, _status_code, _headers = list_placement_policies_with_http_info(opts)
      data
    end

    # List image placement policies
    # Lists image placement policies created in Prism Central, along with details such as name, description, and so on. This API supports operations such as filtering, sorting, selection, and pagination. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - description - enforcementState - name 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - description - enforcementState - name 
    # @option opts [String] :select A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned. - createTime - description - enforcementState - extId - lastUpdateTime - links - name - ownerExtId - placementType - tenantId 
    # @return [Array<(ListPlacementPolicies200Response, Integer, Hash)>] ListPlacementPolicies200Response data, response status code and response headers
    def list_placement_policies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagePlacementPoliciesApi.list_placement_policies ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling ImagePlacementPoliciesApi.list_placement_policies, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ImagePlacementPoliciesApi.list_placement_policies, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ImagePlacementPoliciesApi.list_placement_policies, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/vmm/v4.0/images/config/placement-policies'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?
      query_params[:'$select'] = opts[:'select'] if !opts[:'select'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListPlacementPolicies200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ImagePlacementPoliciesApi.list_placement_policies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagePlacementPoliciesApi#list_placement_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resume an image placement policy
    # Resumes a suspended image placement policy. A suspended image placement policy is one that is not being considered for enforcement. 
    # @param ext_id [String] The external identifier of image placement policy.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [ResumePlacementPolicy202Response]
    def resume_placement_policy(ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = resume_placement_policy_with_http_info(ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Resume an image placement policy
    # Resumes a suspended image placement policy. A suspended image placement policy is one that is not being considered for enforcement. 
    # @param ext_id [String] The external identifier of image placement policy.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResumePlacementPolicy202Response, Integer, Hash)>] ResumePlacementPolicy202Response data, response status code and response headers
    def resume_placement_policy_with_http_info(ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagePlacementPoliciesApi.resume_placement_policy ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ImagePlacementPoliciesApi.resume_placement_policy"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ImagePlacementPoliciesApi.resume_placement_policy, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling ImagePlacementPoliciesApi.resume_placement_policy"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling ImagePlacementPoliciesApi.resume_placement_policy"
      end
      # resource path
      local_var_path = '/vmm/v4.0/images/config/placement-policies/{extId}/$actions/resume'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResumePlacementPolicy202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ImagePlacementPoliciesApi.resume_placement_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagePlacementPoliciesApi#resume_placement_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Suspend an image placement policy
    # Suspends an active image placement policy. An active image placement policy is considered for enforcement. 
    # @param ext_id [String] The external identifier of image placement policy.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_images_config_suspend_placement_policy_config [VmmV40ImagesConfigSuspendPlacementPolicyConfig] 
    # @param [Hash] opts the optional parameters
    # @return [SuspendPlacementPolicy202Response]
    def suspend_placement_policy(ext_id, if_match, ntnx_request_id, vmm_v40_images_config_suspend_placement_policy_config, opts = {})
      data, _status_code, _headers = suspend_placement_policy_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_images_config_suspend_placement_policy_config, opts)
      data
    end

    # Suspend an image placement policy
    # Suspends an active image placement policy. An active image placement policy is considered for enforcement. 
    # @param ext_id [String] The external identifier of image placement policy.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_images_config_suspend_placement_policy_config [VmmV40ImagesConfigSuspendPlacementPolicyConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuspendPlacementPolicy202Response, Integer, Hash)>] SuspendPlacementPolicy202Response data, response status code and response headers
    def suspend_placement_policy_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_images_config_suspend_placement_policy_config, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagePlacementPoliciesApi.suspend_placement_policy ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ImagePlacementPoliciesApi.suspend_placement_policy"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ImagePlacementPoliciesApi.suspend_placement_policy, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling ImagePlacementPoliciesApi.suspend_placement_policy"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling ImagePlacementPoliciesApi.suspend_placement_policy"
      end
      # verify the required parameter 'vmm_v40_images_config_suspend_placement_policy_config' is set
      if @api_client.config.client_side_validation && vmm_v40_images_config_suspend_placement_policy_config.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_images_config_suspend_placement_policy_config' when calling ImagePlacementPoliciesApi.suspend_placement_policy"
      end
      # resource path
      local_var_path = '/vmm/v4.0/images/config/placement-policies/{extId}/$actions/suspend'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_images_config_suspend_placement_policy_config)

      # return_type
      return_type = opts[:debug_return_type] || 'SuspendPlacementPolicy202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ImagePlacementPoliciesApi.suspend_placement_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagePlacementPoliciesApi#suspend_placement_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an image placement policy
    # Updates the image placement policy using the provided request body with the given external identifier. It is always recommended to perform a GET operation on a resource before performing a PUT operation to ensure the correct ETag is used. 
    # @param ext_id [String] The external identifier of image placement policy.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_images_config_placement_policy [VmmV40ImagesConfigPlacementPolicy] Updated image placement policy request.
    # @param [Hash] opts the optional parameters
    # @return [UpdatePlacementPolicyById202Response]
    def update_placement_policy_by_id(ext_id, if_match, ntnx_request_id, vmm_v40_images_config_placement_policy, opts = {})
      data, _status_code, _headers = update_placement_policy_by_id_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_images_config_placement_policy, opts)
      data
    end

    # Update an image placement policy
    # Updates the image placement policy using the provided request body with the given external identifier. It is always recommended to perform a GET operation on a resource before performing a PUT operation to ensure the correct ETag is used. 
    # @param ext_id [String] The external identifier of image placement policy.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_images_config_placement_policy [VmmV40ImagesConfigPlacementPolicy] Updated image placement policy request.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdatePlacementPolicyById202Response, Integer, Hash)>] UpdatePlacementPolicyById202Response data, response status code and response headers
    def update_placement_policy_by_id_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_images_config_placement_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ImagePlacementPoliciesApi.update_placement_policy_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling ImagePlacementPoliciesApi.update_placement_policy_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling ImagePlacementPoliciesApi.update_placement_policy_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling ImagePlacementPoliciesApi.update_placement_policy_by_id"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling ImagePlacementPoliciesApi.update_placement_policy_by_id"
      end
      # verify the required parameter 'vmm_v40_images_config_placement_policy' is set
      if @api_client.config.client_side_validation && vmm_v40_images_config_placement_policy.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_images_config_placement_policy' when calling ImagePlacementPoliciesApi.update_placement_policy_by_id"
      end
      # resource path
      local_var_path = '/vmm/v4.0/images/config/placement-policies/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_images_config_placement_policy)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdatePlacementPolicyById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"ImagePlacementPoliciesApi.update_placement_policy_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ImagePlacementPoliciesApi#update_placement_policy_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
