=begin
#Nutanix Virtual Machine Management APIs

#Manage the life-cycle of virtual machines hosted on Nutanix

The version of the OpenAPI document: 4.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module NutanixVmm
  class VmAntiAffinityPoliciesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create VM-VM anti-affinity policy
    # Creates a VM-VM anti-affinity policy.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_policies_vm_anti_affinity_policy [VmmV40AhvPoliciesVmAntiAffinityPolicy] 
    # @param [Hash] opts the optional parameters
    # @return [CreateVmAntiAffinityPolicy202Response]
    def create_vm_anti_affinity_policy(ntnx_request_id, vmm_v40_ahv_policies_vm_anti_affinity_policy, opts = {})
      data, _status_code, _headers = create_vm_anti_affinity_policy_with_http_info(ntnx_request_id, vmm_v40_ahv_policies_vm_anti_affinity_policy, opts)
      data
    end

    # Create VM-VM anti-affinity policy
    # Creates a VM-VM anti-affinity policy.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_policies_vm_anti_affinity_policy [VmmV40AhvPoliciesVmAntiAffinityPolicy] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateVmAntiAffinityPolicy202Response, Integer, Hash)>] CreateVmAntiAffinityPolicy202Response data, response status code and response headers
    def create_vm_anti_affinity_policy_with_http_info(ntnx_request_id, vmm_v40_ahv_policies_vm_anti_affinity_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmAntiAffinityPoliciesApi.create_vm_anti_affinity_policy ...'
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmAntiAffinityPoliciesApi.create_vm_anti_affinity_policy"
      end
      # verify the required parameter 'vmm_v40_ahv_policies_vm_anti_affinity_policy' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_policies_vm_anti_affinity_policy.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_policies_vm_anti_affinity_policy' when calling VmAntiAffinityPoliciesApi.create_vm_anti_affinity_policy"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/policies/vm-anti-affinity-policies'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_policies_vm_anti_affinity_policy)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateVmAntiAffinityPolicy202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmAntiAffinityPoliciesApi.create_vm_anti_affinity_policy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmAntiAffinityPoliciesApi#create_vm_anti_affinity_policy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete legacy VM-VM anti-affinity policy
    # Deletes the legacy VM-VM anti-affinity policy.
    # @param ext_id [String] External ID of the legacy VM-VM Anti-Affinity policy of type UUID.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [DeleteLegacyVmAntiAffinityPolicyById202Response]
    def delete_legacy_vm_anti_affinity_policy_by_id(ext_id, ntnx_request_id, opts = {})
      data, _status_code, _headers = delete_legacy_vm_anti_affinity_policy_by_id_with_http_info(ext_id, ntnx_request_id, opts)
      data
    end

    # Delete legacy VM-VM anti-affinity policy
    # Deletes the legacy VM-VM anti-affinity policy.
    # @param ext_id [String] External ID of the legacy VM-VM Anti-Affinity policy of type UUID.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteLegacyVmAntiAffinityPolicyById202Response, Integer, Hash)>] DeleteLegacyVmAntiAffinityPolicyById202Response data, response status code and response headers
    def delete_legacy_vm_anti_affinity_policy_by_id_with_http_info(ext_id, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmAntiAffinityPoliciesApi.delete_legacy_vm_anti_affinity_policy_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmAntiAffinityPoliciesApi.delete_legacy_vm_anti_affinity_policy_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmAntiAffinityPoliciesApi.delete_legacy_vm_anti_affinity_policy_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmAntiAffinityPoliciesApi.delete_legacy_vm_anti_affinity_policy_by_id"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/policies/legacy-vm-anti-affinity-policies/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteLegacyVmAntiAffinityPolicyById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmAntiAffinityPoliciesApi.delete_legacy_vm_anti_affinity_policy_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmAntiAffinityPoliciesApi#delete_legacy_vm_anti_affinity_policy_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete VM-VM anti-affinity policy
    # Deletes the requested VM-VM anti-affinity policy.
    # @param ext_id [String] A globally unique identifier of a VM-VM anti-affinity policy of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [DeleteVmAntiAffinityPolicyById202Response]
    def delete_vm_anti_affinity_policy_by_id(ext_id, if_match, ntnx_request_id, opts = {})
      data, _status_code, _headers = delete_vm_anti_affinity_policy_by_id_with_http_info(ext_id, if_match, ntnx_request_id, opts)
      data
    end

    # Delete VM-VM anti-affinity policy
    # Deletes the requested VM-VM anti-affinity policy.
    # @param ext_id [String] A globally unique identifier of a VM-VM anti-affinity policy of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided the server will respond with an HTTP 428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP 412 (Precondition Failed) response 
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteVmAntiAffinityPolicyById202Response, Integer, Hash)>] DeleteVmAntiAffinityPolicyById202Response data, response status code and response headers
    def delete_vm_anti_affinity_policy_by_id_with_http_info(ext_id, if_match, ntnx_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmAntiAffinityPoliciesApi.delete_vm_anti_affinity_policy_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmAntiAffinityPoliciesApi.delete_vm_anti_affinity_policy_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmAntiAffinityPoliciesApi.delete_vm_anti_affinity_policy_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmAntiAffinityPoliciesApi.delete_vm_anti_affinity_policy_by_id"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmAntiAffinityPoliciesApi.delete_vm_anti_affinity_policy_by_id"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/policies/vm-anti-affinity-policies/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteVmAntiAffinityPolicyById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmAntiAffinityPoliciesApi.delete_vm_anti_affinity_policy_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmAntiAffinityPoliciesApi#delete_vm_anti_affinity_policy_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get VM-VM anti-affinity policy based on the provided external identifier
    # Fetches the VM-VM anti-affinity policy of the provided VM-VM anti-affinity policy external identifier.
    # @param ext_id [String] A globally unique identifier of a VM-VM anti-affinity policy of type UUID.
    # @param [Hash] opts the optional parameters
    # @return [GetVmAntiAffinityPolicyById200Response]
    def get_vm_anti_affinity_policy_by_id(ext_id, opts = {})
      data, _status_code, _headers = get_vm_anti_affinity_policy_by_id_with_http_info(ext_id, opts)
      data
    end

    # Get VM-VM anti-affinity policy based on the provided external identifier
    # Fetches the VM-VM anti-affinity policy of the provided VM-VM anti-affinity policy external identifier.
    # @param ext_id [String] A globally unique identifier of a VM-VM anti-affinity policy of type UUID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetVmAntiAffinityPolicyById200Response, Integer, Hash)>] GetVmAntiAffinityPolicyById200Response data, response status code and response headers
    def get_vm_anti_affinity_policy_by_id_with_http_info(ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmAntiAffinityPoliciesApi.get_vm_anti_affinity_policy_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmAntiAffinityPoliciesApi.get_vm_anti_affinity_policy_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmAntiAffinityPoliciesApi.get_vm_anti_affinity_policy_by_id, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/vmm/v4.0/ahv/policies/vm-anti-affinity-policies/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetVmAntiAffinityPolicyById200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmAntiAffinityPoliciesApi.get_vm_anti_affinity_policy_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmAntiAffinityPoliciesApi#get_vm_anti_affinity_policy_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List legacy VM-VM anti-affinity policies
    # List legacy VM-VM anti-affinity policies.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - extId - name 
    # @return [ListLegacyVmAntiAffinityPolicies200Response]
    def list_legacy_vm_anti_affinity_policies(opts = {})
      data, _status_code, _headers = list_legacy_vm_anti_affinity_policies_with_http_info(opts)
      data
    end

    # List legacy VM-VM anti-affinity policies
    # List legacy VM-VM anti-affinity policies.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - extId - name 
    # @return [Array<(ListLegacyVmAntiAffinityPolicies200Response, Integer, Hash)>] ListLegacyVmAntiAffinityPolicies200Response data, response status code and response headers
    def list_legacy_vm_anti_affinity_policies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmAntiAffinityPoliciesApi.list_legacy_vm_anti_affinity_policies ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling VmAntiAffinityPoliciesApi.list_legacy_vm_anti_affinity_policies, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VmAntiAffinityPoliciesApi.list_legacy_vm_anti_affinity_policies, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VmAntiAffinityPoliciesApi.list_legacy_vm_anti_affinity_policies, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/vmm/v4.0/ahv/policies/legacy-vm-anti-affinity-policies'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListLegacyVmAntiAffinityPolicies200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmAntiAffinityPoliciesApi.list_legacy_vm_anti_affinity_policies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmAntiAffinityPoliciesApi#list_legacy_vm_anti_affinity_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List VM-VM anti-affinity policies
    # List VM-VM anti-affinity policies.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - name 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - name - updateTime 
    # @return [ListVmAntiAffinityPolicies200Response]
    def list_vm_anti_affinity_policies(opts = {})
      data, _status_code, _headers = list_vm_anti_affinity_policies_with_http_info(opts)
      data
    end

    # List VM-VM anti-affinity policies
    # List VM-VM anti-affinity policies.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @option opts [String] :filter A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the [OData V4.01](https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html) URL conventions. For example, filter &#39;$filter&#x3D;name eq &#39;karbon-ntnx-1.0&#39; would filter the result on cluster name &#39;karbon-ntnx1.0&#39;, filter &#39;$filter&#x3D;startswith(name, &#39;C&#39;)&#39; would filter on cluster name starting with &#39;C&#39;. The filter can be applied to the following fields: - name 
    # @option opts [String] :orderby A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, &#39;$orderby&#x3D;templateName desc&#39; would get all templates sorted by templateName in descending order. The orderby can be applied to the following fields: - name - updateTime 
    # @return [Array<(ListVmAntiAffinityPolicies200Response, Integer, Hash)>] ListVmAntiAffinityPolicies200Response data, response status code and response headers
    def list_vm_anti_affinity_policies_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmAntiAffinityPoliciesApi.list_vm_anti_affinity_policies ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling VmAntiAffinityPoliciesApi.list_vm_anti_affinity_policies, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VmAntiAffinityPoliciesApi.list_vm_anti_affinity_policies, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VmAntiAffinityPoliciesApi.list_vm_anti_affinity_policies, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/vmm/v4.0/ahv/policies/vm-anti-affinity-policies'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'$filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'$orderby'] = opts[:'orderby'] if !opts[:'orderby'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListVmAntiAffinityPolicies200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmAntiAffinityPoliciesApi.list_vm_anti_affinity_policies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmAntiAffinityPoliciesApi#list_vm_anti_affinity_policies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List compliance states of VMs in the VM-VM anti-affinity policy based on the provided external identifier
    # Lists compliance states of VMs in the VM-VM anti-affinity policy of the provided VM-VM anti-affinity policy external identifier.
    # @param vm_anti_affinity_policy_ext_id [String] A globally unique identifier of a VM-VM anti-affinity policy of type UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @return [ListVmAntiAffinityPolicyVmComplianceStates200Response]
    def list_vm_anti_affinity_policy_vm_compliance_states(vm_anti_affinity_policy_ext_id, opts = {})
      data, _status_code, _headers = list_vm_anti_affinity_policy_vm_compliance_states_with_http_info(vm_anti_affinity_policy_ext_id, opts)
      data
    end

    # List compliance states of VMs in the VM-VM anti-affinity policy based on the provided external identifier
    # Lists compliance states of VMs in the VM-VM anti-affinity policy of the provided VM-VM anti-affinity policy external identifier.
    # @param vm_anti_affinity_policy_ext_id [String] A globally unique identifier of a VM-VM anti-affinity policy of type UUID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.  (default to 0)
    # @option opts [Integer] :limit A URL query parameter that specifies the total number of records returned in the result set.  Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.  (default to 50)
    # @return [Array<(ListVmAntiAffinityPolicyVmComplianceStates200Response, Integer, Hash)>] ListVmAntiAffinityPolicyVmComplianceStates200Response data, response status code and response headers
    def list_vm_anti_affinity_policy_vm_compliance_states_with_http_info(vm_anti_affinity_policy_ext_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmAntiAffinityPoliciesApi.list_vm_anti_affinity_policy_vm_compliance_states ...'
      end
      # verify the required parameter 'vm_anti_affinity_policy_ext_id' is set
      if @api_client.config.client_side_validation && vm_anti_affinity_policy_ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'vm_anti_affinity_policy_ext_id' when calling VmAntiAffinityPoliciesApi.list_vm_anti_affinity_policy_vm_compliance_states"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && vm_anti_affinity_policy_ext_id !~ pattern
        fail ArgumentError, "invalid value for 'vm_anti_affinity_policy_ext_id' when calling VmAntiAffinityPoliciesApi.list_vm_anti_affinity_policy_vm_compliance_states, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 0
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling VmAntiAffinityPoliciesApi.list_vm_anti_affinity_policy_vm_compliance_states, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VmAntiAffinityPoliciesApi.list_vm_anti_affinity_policy_vm_compliance_states, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling VmAntiAffinityPoliciesApi.list_vm_anti_affinity_policy_vm_compliance_states, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/vmm/v4.0/ahv/policies/vm-anti-affinity-policies/{vmAntiAffinityPolicyExtId}/vm-compliance-states'.sub('{' + 'vmAntiAffinityPolicyExtId' + '}', CGI.escape(vm_anti_affinity_policy_ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'$page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'$limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListVmAntiAffinityPolicyVmComplianceStates200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmAntiAffinityPoliciesApi.list_vm_anti_affinity_policy_vm_compliance_states",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmAntiAffinityPoliciesApi#list_vm_anti_affinity_policy_vm_compliance_states\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update VM-VM anti-affinity policy
    # Updates the requested VM-VM anti-affinity policy.
    # @param ext_id [String] A globally unique identifier of a VM-VM anti-affinity policy of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_policies_vm_anti_affinity_policy [VmmV40AhvPoliciesVmAntiAffinityPolicy] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateVmAntiAffinityPolicyById202Response]
    def update_vm_anti_affinity_policy_by_id(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_policies_vm_anti_affinity_policy, opts = {})
      data, _status_code, _headers = update_vm_anti_affinity_policy_by_id_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_policies_vm_anti_affinity_policy, opts)
      data
    end

    # Update VM-VM anti-affinity policy
    # Updates the requested VM-VM anti-affinity policy.
    # @param ext_id [String] A globally unique identifier of a VM-VM anti-affinity policy of type UUID.
    # @param if_match [String] The If-Match request header makes the request conditional. When not provided, the server will respond with  an HTTP-428 (Precondition Required) response code indicating that the server requires the request to be conditional. The server will allow the successful completion of PUT and PATCH operations, if the resource matches the ETag value returned to the response of a GET operation. If the conditional does not match, then an HTTP-412 (Precondition Failed) response will be returned.
    # @param ntnx_request_id [String] A unique identifier that is associated with each request. The provided value must be opaque and preferably in Universal Unique Identifier (UUID) format. This identifier is also used as an idempotence token for safely retrying requests in case of network errors. All the supported Nutanix API clients add this auto-generated request identifier to each request. 
    # @param vmm_v40_ahv_policies_vm_anti_affinity_policy [VmmV40AhvPoliciesVmAntiAffinityPolicy] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateVmAntiAffinityPolicyById202Response, Integer, Hash)>] UpdateVmAntiAffinityPolicyById202Response data, response status code and response headers
    def update_vm_anti_affinity_policy_by_id_with_http_info(ext_id, if_match, ntnx_request_id, vmm_v40_ahv_policies_vm_anti_affinity_policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VmAntiAffinityPoliciesApi.update_vm_anti_affinity_policy_by_id ...'
      end
      # verify the required parameter 'ext_id' is set
      if @api_client.config.client_side_validation && ext_id.nil?
        fail ArgumentError, "Missing the required parameter 'ext_id' when calling VmAntiAffinityPoliciesApi.update_vm_anti_affinity_policy_by_id"
      end
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if @api_client.config.client_side_validation && ext_id !~ pattern
        fail ArgumentError, "invalid value for 'ext_id' when calling VmAntiAffinityPoliciesApi.update_vm_anti_affinity_policy_by_id, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'if_match' is set
      if @api_client.config.client_side_validation && if_match.nil?
        fail ArgumentError, "Missing the required parameter 'if_match' when calling VmAntiAffinityPoliciesApi.update_vm_anti_affinity_policy_by_id"
      end
      # verify the required parameter 'ntnx_request_id' is set
      if @api_client.config.client_side_validation && ntnx_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'ntnx_request_id' when calling VmAntiAffinityPoliciesApi.update_vm_anti_affinity_policy_by_id"
      end
      # verify the required parameter 'vmm_v40_ahv_policies_vm_anti_affinity_policy' is set
      if @api_client.config.client_side_validation && vmm_v40_ahv_policies_vm_anti_affinity_policy.nil?
        fail ArgumentError, "Missing the required parameter 'vmm_v40_ahv_policies_vm_anti_affinity_policy' when calling VmAntiAffinityPoliciesApi.update_vm_anti_affinity_policy_by_id"
      end
      # resource path
      local_var_path = '/vmm/v4.0/ahv/policies/vm-anti-affinity-policies/{extId}'.sub('{' + 'extId' + '}', CGI.escape(ext_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'If-Match'] = if_match
      header_params[:'NTNX-Request-Id'] = ntnx_request_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(vmm_v40_ahv_policies_vm_anti_affinity_policy)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateVmAntiAffinityPolicyById202Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuthScheme', 'basicAuthScheme']

      new_options = opts.merge(
        :operation => :"VmAntiAffinityPoliciesApi.update_vm_anti_affinity_policy_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VmAntiAffinityPoliciesApi#update_vm_anti_affinity_policy_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
