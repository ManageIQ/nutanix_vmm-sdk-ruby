=begin
#Nutanix Virtual Machine Management APIs

#Manage the life-cycle of virtual machines hosted on Nutanix

The version of the OpenAPI document: 4.0

Generated by: https://openapi-generator.tech
Generator version: 7.16.0

=end

require 'date'
require 'time'

module NutanixVmm
  # A collection of VM disk stats.
  class VmmV40AhvStatsVmDiskStatsTuple
    # The timestamp of a specific VM stats response data point.
    attr_accessor :timestamp

    # The VM disk controller average I/O latency in microseconds.
    attr_accessor :controller_avg_io_latency_micros

    # The VM disk controller average read I/O latency in microseconds.
    attr_accessor :controller_avg_read_io_latency_micros

    # The VM disk controller average read I/O size in kilobytes.
    attr_accessor :controller_avg_read_io_size_kb

    # The VM disk controller number of read I/O operations per second.
    attr_accessor :controller_num_read_iops

    # The VM disk controller percentage of read I/O in parts per million.
    attr_accessor :controller_read_io_ppm

    # The VM disk controller number of write I/O.
    attr_accessor :controller_num_write_io

    # The VM disk controller average write I/O latency in microseconds.
    attr_accessor :controller_avg_write_io_latency_micros

    # The VM disk controller average write I/O size in kilobytes.
    attr_accessor :controller_avg_write_io_size_kb

    # The VM disk controller number of I/O bandwidth in kilobytes per second.
    attr_accessor :controller_io_bandwidth_kbps

    # The VM disk controller number of frontend read operations.
    attr_accessor :controller_frontend_read_ops

    # The VM disk controller number of frontend write operations.
    attr_accessor :controller_frontend_write_ops

    # The VM disk controller number of I/O.
    attr_accessor :controller_num_io

    # The VM disk controller number of I/O operations per second.
    attr_accessor :controller_num_iops

    # The VM disk controller number of read I/O.
    attr_accessor :controller_num_read_io

    # The VM disk controller number of random read operations.
    attr_accessor :controller_random_read_ops

    # The VM disk controller number of random write operations.
    attr_accessor :controller_random_write_ops

    # The VM disk controller number of read I/O bandwidth in kilobytes per second.
    attr_accessor :controller_read_io_bandwidth_kbps

    # The VM disk controller percentage of sequential I/O in parts per million.
    attr_accessor :controller_seq_io_ppm

    # The VM disk controller timespan in microseconds.
    attr_accessor :controller_timespan_micros

    # The VM disk controller total I/O size in kilobytes.
    attr_accessor :controller_total_io_size_kb

    # The VM disk controller total I/O time in microseconds.
    attr_accessor :controller_total_io_time_micros

    # The VM disk controller total read I/O size in kilobytes.
    attr_accessor :controller_total_read_io_size_kb

    # The VM disk controller total read I/O time in microseconds.
    attr_accessor :controller_total_read_io_time_micros

    # The VM disk controller user bytes.
    attr_accessor :controller_user_bytes

    # The VM disk controller vDisk CPU time in microseconds.
    attr_accessor :controller_vdisk_cpu_time_micros

    # The VM disk controller write I/O bandwidth in kilobytes per second.
    attr_accessor :controller_write_io_bandwidth_kbps

    # The VM disk controller percentage of write I/O in parts per million.
    attr_accessor :controller_write_io_ppm

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'timestamp' => :'timestamp',
        :'controller_avg_io_latency_micros' => :'controllerAvgIoLatencyMicros',
        :'controller_avg_read_io_latency_micros' => :'controllerAvgReadIoLatencyMicros',
        :'controller_avg_read_io_size_kb' => :'controllerAvgReadIoSizeKb',
        :'controller_num_read_iops' => :'controllerNumReadIops',
        :'controller_read_io_ppm' => :'controllerReadIoPpm',
        :'controller_num_write_io' => :'controllerNumWriteIo',
        :'controller_avg_write_io_latency_micros' => :'controllerAvgWriteIoLatencyMicros',
        :'controller_avg_write_io_size_kb' => :'controllerAvgWriteIoSizeKb',
        :'controller_io_bandwidth_kbps' => :'controllerIoBandwidthKbps',
        :'controller_frontend_read_ops' => :'controllerFrontendReadOps',
        :'controller_frontend_write_ops' => :'controllerFrontendWriteOps',
        :'controller_num_io' => :'controllerNumIo',
        :'controller_num_iops' => :'controllerNumIops',
        :'controller_num_read_io' => :'controllerNumReadIo',
        :'controller_random_read_ops' => :'controllerRandomReadOps',
        :'controller_random_write_ops' => :'controllerRandomWriteOps',
        :'controller_read_io_bandwidth_kbps' => :'controllerReadIoBandwidthKbps',
        :'controller_seq_io_ppm' => :'controllerSeqIoPpm',
        :'controller_timespan_micros' => :'controllerTimespanMicros',
        :'controller_total_io_size_kb' => :'controllerTotalIoSizeKb',
        :'controller_total_io_time_micros' => :'controllerTotalIoTimeMicros',
        :'controller_total_read_io_size_kb' => :'controllerTotalReadIoSizeKb',
        :'controller_total_read_io_time_micros' => :'controllerTotalReadIoTimeMicros',
        :'controller_user_bytes' => :'controllerUserBytes',
        :'controller_vdisk_cpu_time_micros' => :'controllerVdiskCpuTimeMicros',
        :'controller_write_io_bandwidth_kbps' => :'controllerWriteIoBandwidthKbps',
        :'controller_write_io_ppm' => :'controllerWriteIoPpm'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'timestamp' => :'Time',
        :'controller_avg_io_latency_micros' => :'Integer',
        :'controller_avg_read_io_latency_micros' => :'Integer',
        :'controller_avg_read_io_size_kb' => :'Integer',
        :'controller_num_read_iops' => :'Integer',
        :'controller_read_io_ppm' => :'Integer',
        :'controller_num_write_io' => :'Integer',
        :'controller_avg_write_io_latency_micros' => :'Integer',
        :'controller_avg_write_io_size_kb' => :'Integer',
        :'controller_io_bandwidth_kbps' => :'Integer',
        :'controller_frontend_read_ops' => :'Integer',
        :'controller_frontend_write_ops' => :'Integer',
        :'controller_num_io' => :'Integer',
        :'controller_num_iops' => :'Integer',
        :'controller_num_read_io' => :'Integer',
        :'controller_random_read_ops' => :'Integer',
        :'controller_random_write_ops' => :'Integer',
        :'controller_read_io_bandwidth_kbps' => :'Integer',
        :'controller_seq_io_ppm' => :'Integer',
        :'controller_timespan_micros' => :'Integer',
        :'controller_total_io_size_kb' => :'Integer',
        :'controller_total_io_time_micros' => :'Integer',
        :'controller_total_read_io_size_kb' => :'Integer',
        :'controller_total_read_io_time_micros' => :'Integer',
        :'controller_user_bytes' => :'Integer',
        :'controller_vdisk_cpu_time_micros' => :'Integer',
        :'controller_write_io_bandwidth_kbps' => :'Integer',
        :'controller_write_io_ppm' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NutanixVmm::VmmV40AhvStatsVmDiskStatsTuple` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NutanixVmm::VmmV40AhvStatsVmDiskStatsTuple`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.key?(:'controller_avg_io_latency_micros')
        self.controller_avg_io_latency_micros = attributes[:'controller_avg_io_latency_micros']
      end

      if attributes.key?(:'controller_avg_read_io_latency_micros')
        self.controller_avg_read_io_latency_micros = attributes[:'controller_avg_read_io_latency_micros']
      end

      if attributes.key?(:'controller_avg_read_io_size_kb')
        self.controller_avg_read_io_size_kb = attributes[:'controller_avg_read_io_size_kb']
      end

      if attributes.key?(:'controller_num_read_iops')
        self.controller_num_read_iops = attributes[:'controller_num_read_iops']
      end

      if attributes.key?(:'controller_read_io_ppm')
        self.controller_read_io_ppm = attributes[:'controller_read_io_ppm']
      end

      if attributes.key?(:'controller_num_write_io')
        self.controller_num_write_io = attributes[:'controller_num_write_io']
      end

      if attributes.key?(:'controller_avg_write_io_latency_micros')
        self.controller_avg_write_io_latency_micros = attributes[:'controller_avg_write_io_latency_micros']
      end

      if attributes.key?(:'controller_avg_write_io_size_kb')
        self.controller_avg_write_io_size_kb = attributes[:'controller_avg_write_io_size_kb']
      end

      if attributes.key?(:'controller_io_bandwidth_kbps')
        self.controller_io_bandwidth_kbps = attributes[:'controller_io_bandwidth_kbps']
      end

      if attributes.key?(:'controller_frontend_read_ops')
        self.controller_frontend_read_ops = attributes[:'controller_frontend_read_ops']
      end

      if attributes.key?(:'controller_frontend_write_ops')
        self.controller_frontend_write_ops = attributes[:'controller_frontend_write_ops']
      end

      if attributes.key?(:'controller_num_io')
        self.controller_num_io = attributes[:'controller_num_io']
      end

      if attributes.key?(:'controller_num_iops')
        self.controller_num_iops = attributes[:'controller_num_iops']
      end

      if attributes.key?(:'controller_num_read_io')
        self.controller_num_read_io = attributes[:'controller_num_read_io']
      end

      if attributes.key?(:'controller_random_read_ops')
        self.controller_random_read_ops = attributes[:'controller_random_read_ops']
      end

      if attributes.key?(:'controller_random_write_ops')
        self.controller_random_write_ops = attributes[:'controller_random_write_ops']
      end

      if attributes.key?(:'controller_read_io_bandwidth_kbps')
        self.controller_read_io_bandwidth_kbps = attributes[:'controller_read_io_bandwidth_kbps']
      end

      if attributes.key?(:'controller_seq_io_ppm')
        self.controller_seq_io_ppm = attributes[:'controller_seq_io_ppm']
      end

      if attributes.key?(:'controller_timespan_micros')
        self.controller_timespan_micros = attributes[:'controller_timespan_micros']
      end

      if attributes.key?(:'controller_total_io_size_kb')
        self.controller_total_io_size_kb = attributes[:'controller_total_io_size_kb']
      end

      if attributes.key?(:'controller_total_io_time_micros')
        self.controller_total_io_time_micros = attributes[:'controller_total_io_time_micros']
      end

      if attributes.key?(:'controller_total_read_io_size_kb')
        self.controller_total_read_io_size_kb = attributes[:'controller_total_read_io_size_kb']
      end

      if attributes.key?(:'controller_total_read_io_time_micros')
        self.controller_total_read_io_time_micros = attributes[:'controller_total_read_io_time_micros']
      end

      if attributes.key?(:'controller_user_bytes')
        self.controller_user_bytes = attributes[:'controller_user_bytes']
      end

      if attributes.key?(:'controller_vdisk_cpu_time_micros')
        self.controller_vdisk_cpu_time_micros = attributes[:'controller_vdisk_cpu_time_micros']
      end

      if attributes.key?(:'controller_write_io_bandwidth_kbps')
        self.controller_write_io_bandwidth_kbps = attributes[:'controller_write_io_bandwidth_kbps']
      end

      if attributes.key?(:'controller_write_io_ppm')
        self.controller_write_io_ppm = attributes[:'controller_write_io_ppm']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          timestamp == o.timestamp &&
          controller_avg_io_latency_micros == o.controller_avg_io_latency_micros &&
          controller_avg_read_io_latency_micros == o.controller_avg_read_io_latency_micros &&
          controller_avg_read_io_size_kb == o.controller_avg_read_io_size_kb &&
          controller_num_read_iops == o.controller_num_read_iops &&
          controller_read_io_ppm == o.controller_read_io_ppm &&
          controller_num_write_io == o.controller_num_write_io &&
          controller_avg_write_io_latency_micros == o.controller_avg_write_io_latency_micros &&
          controller_avg_write_io_size_kb == o.controller_avg_write_io_size_kb &&
          controller_io_bandwidth_kbps == o.controller_io_bandwidth_kbps &&
          controller_frontend_read_ops == o.controller_frontend_read_ops &&
          controller_frontend_write_ops == o.controller_frontend_write_ops &&
          controller_num_io == o.controller_num_io &&
          controller_num_iops == o.controller_num_iops &&
          controller_num_read_io == o.controller_num_read_io &&
          controller_random_read_ops == o.controller_random_read_ops &&
          controller_random_write_ops == o.controller_random_write_ops &&
          controller_read_io_bandwidth_kbps == o.controller_read_io_bandwidth_kbps &&
          controller_seq_io_ppm == o.controller_seq_io_ppm &&
          controller_timespan_micros == o.controller_timespan_micros &&
          controller_total_io_size_kb == o.controller_total_io_size_kb &&
          controller_total_io_time_micros == o.controller_total_io_time_micros &&
          controller_total_read_io_size_kb == o.controller_total_read_io_size_kb &&
          controller_total_read_io_time_micros == o.controller_total_read_io_time_micros &&
          controller_user_bytes == o.controller_user_bytes &&
          controller_vdisk_cpu_time_micros == o.controller_vdisk_cpu_time_micros &&
          controller_write_io_bandwidth_kbps == o.controller_write_io_bandwidth_kbps &&
          controller_write_io_ppm == o.controller_write_io_ppm
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [timestamp, controller_avg_io_latency_micros, controller_avg_read_io_latency_micros, controller_avg_read_io_size_kb, controller_num_read_iops, controller_read_io_ppm, controller_num_write_io, controller_avg_write_io_latency_micros, controller_avg_write_io_size_kb, controller_io_bandwidth_kbps, controller_frontend_read_ops, controller_frontend_write_ops, controller_num_io, controller_num_iops, controller_num_read_io, controller_random_read_ops, controller_random_write_ops, controller_read_io_bandwidth_kbps, controller_seq_io_ppm, controller_timespan_micros, controller_total_io_size_kb, controller_total_io_time_micros, controller_total_read_io_size_kb, controller_total_read_io_time_micros, controller_user_bytes, controller_vdisk_cpu_time_micros, controller_write_io_bandwidth_kbps, controller_write_io_ppm].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NutanixVmm.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
