=begin
#Nutanix Virtual Machine Management APIs

#Manage the life-cycle of virtual machines hosted on Nutanix

The version of the OpenAPI document: 4.0

Generated by: https://openapi-generator.tech
Generator version: 7.16.0

=end

require 'date'
require 'time'

module NutanixVmm
  # VM configuration.
  class VmmV40AhvConfigVm
    # A globally unique identifier that represents the tenant that owns this entity. The system automatically assigns it, and it and is immutable from an API consumer perspective (some use cases may cause this Id to change - For instance, a use case may require the transfer of ownership of the entity, but these cases are handled automatically on the server). 
    attr_accessor :tenant_id

    # A globally unique identifier of an instance that is suitable for external consumption. 
    attr_accessor :ext_id

    # A HATEOAS style link for the response.  Each link contains a user-friendly name identifying the link and an address for retrieving the particular resource. 
    attr_accessor :links

    # VM name.
    attr_accessor :name

    # VM description.
    attr_accessor :description

    # VM creation time.
    attr_accessor :create_time

    # VM last updated time.
    attr_accessor :update_time

    attr_accessor :source

    # Number of vCPU sockets.
    attr_accessor :num_sockets

    # Number of cores per socket.
    attr_accessor :num_cores_per_socket

    # Number of threads per core.
    attr_accessor :num_threads_per_core

    # Number of NUMA nodes. 0 means NUMA is disabled.
    attr_accessor :num_numa_nodes

    # Memory size in bytes.
    attr_accessor :memory_size_bytes

    # Indicates whether the vCPUs should be hard pinned to specific pCPUs or not.
    attr_accessor :is_vcpu_hard_pinning_enabled

    # Indicates whether to passthrough the host CPU features to the guest or not. Enabling this will make VM incapable of live migration.
    attr_accessor :is_cpu_passthrough_enabled

    # The list of additional CPU features to be enabled. HardwareVirtualization: Indicates whether hardware assisted virtualization should be enabled for the Guest OS or not. Once enabled, the Guest OS can deploy a nested hypervisor.
    attr_accessor :enabled_cpu_features

    # Indicates whether the memory overcommit feature should be enabled for the VM or not. If enabled, parts of the VM memory may reside outside of the hypervisor physical memory. Once enabled, it should be expected that the VM may suffer performance degradation.
    attr_accessor :is_memory_overcommit_enabled

    # Indicates whether the vGPU console is enabled or not.
    attr_accessor :is_gpu_console_enabled

    # Indicates whether the VM CPU hotplug is enabled.
    attr_accessor :is_cpu_hotplug_enabled

    # Indicates whether the VM SCSI controller is enabled.
    attr_accessor :is_scsi_controller_enabled

    # Generation UUID of the VM of type UUID.
    attr_accessor :generation_uuid

    # BIOS UUID of the VM of type UUID.
    attr_accessor :bios_uuid

    # Categories for the VM.
    attr_accessor :categories

    attr_accessor :ownership_info

    attr_accessor :host

    attr_accessor :cluster

    attr_accessor :availability_zone

    attr_accessor :guest_customization

    attr_accessor :guest_tools

    # VM hardware clock timezone in IANA TZDB format (America/Los_Angeles).
    attr_accessor :hardware_clock_timezone

    # Indicates whether to remove AHV branding from VM firmware tables or not.
    attr_accessor :is_branding_enabled

    attr_accessor :boot_config

    # Indicates whether the VGA console should be disabled or not.
    attr_accessor :is_vga_console_enabled

    attr_accessor :machine_type

    attr_accessor :power_state

    attr_accessor :vtpm_config

    # Indicates whether the VM is an agent VM or not. When their host enters maintenance mode, once the normal VMs are evacuated, the agent VMs are powered off. When the host is restored, agent VMs are powered on before the normal VMs are restored. In other words, agent VMs cannot be HA-protected or live migrated.
    attr_accessor :is_agent_vm

    attr_accessor :apc_config

    # Indicates whether the VM is capable of live migrating to another host or not, based on its configuration.
    attr_accessor :is_live_migrate_capable

    # Indicates whether the VM is currently undergoing cross cluster migration.
    attr_accessor :is_cross_cluster_migration_in_progress

    attr_accessor :storage_config

    # Disks attached to the VM.
    attr_accessor :disks

    # CD-ROMs attached to the VM.
    attr_accessor :cd_roms

    # NICs attached to the VM.
    attr_accessor :nics

    # GPUs attached to the VM.
    attr_accessor :gpus

    # Serial ports configured on the VM.
    attr_accessor :serial_ports

    attr_accessor :protection_type

    attr_accessor :protection_policy_state

    # PCIe devices attached to the VM.
    attr_accessor :pcie_devices

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'tenant_id' => :'tenantId',
        :'ext_id' => :'extId',
        :'links' => :'links',
        :'name' => :'name',
        :'description' => :'description',
        :'create_time' => :'createTime',
        :'update_time' => :'updateTime',
        :'source' => :'source',
        :'num_sockets' => :'numSockets',
        :'num_cores_per_socket' => :'numCoresPerSocket',
        :'num_threads_per_core' => :'numThreadsPerCore',
        :'num_numa_nodes' => :'numNumaNodes',
        :'memory_size_bytes' => :'memorySizeBytes',
        :'is_vcpu_hard_pinning_enabled' => :'isVcpuHardPinningEnabled',
        :'is_cpu_passthrough_enabled' => :'isCpuPassthroughEnabled',
        :'enabled_cpu_features' => :'enabledCpuFeatures',
        :'is_memory_overcommit_enabled' => :'isMemoryOvercommitEnabled',
        :'is_gpu_console_enabled' => :'isGpuConsoleEnabled',
        :'is_cpu_hotplug_enabled' => :'isCpuHotplugEnabled',
        :'is_scsi_controller_enabled' => :'isScsiControllerEnabled',
        :'generation_uuid' => :'generationUuid',
        :'bios_uuid' => :'biosUuid',
        :'categories' => :'categories',
        :'ownership_info' => :'ownershipInfo',
        :'host' => :'host',
        :'cluster' => :'cluster',
        :'availability_zone' => :'availabilityZone',
        :'guest_customization' => :'guestCustomization',
        :'guest_tools' => :'guestTools',
        :'hardware_clock_timezone' => :'hardwareClockTimezone',
        :'is_branding_enabled' => :'isBrandingEnabled',
        :'boot_config' => :'bootConfig',
        :'is_vga_console_enabled' => :'isVgaConsoleEnabled',
        :'machine_type' => :'machineType',
        :'power_state' => :'powerState',
        :'vtpm_config' => :'vtpmConfig',
        :'is_agent_vm' => :'isAgentVm',
        :'apc_config' => :'apcConfig',
        :'is_live_migrate_capable' => :'isLiveMigrateCapable',
        :'is_cross_cluster_migration_in_progress' => :'isCrossClusterMigrationInProgress',
        :'storage_config' => :'storageConfig',
        :'disks' => :'disks',
        :'cd_roms' => :'cdRoms',
        :'nics' => :'nics',
        :'gpus' => :'gpus',
        :'serial_ports' => :'serialPorts',
        :'protection_type' => :'protectionType',
        :'protection_policy_state' => :'protectionPolicyState',
        :'pcie_devices' => :'pcieDevices'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'tenant_id' => :'String',
        :'ext_id' => :'String',
        :'links' => :'Array<CommonV10ResponseApiLink>',
        :'name' => :'String',
        :'description' => :'String',
        :'create_time' => :'Time',
        :'update_time' => :'Time',
        :'source' => :'VmmV40AhvConfigVmSourceReference',
        :'num_sockets' => :'Integer',
        :'num_cores_per_socket' => :'Integer',
        :'num_threads_per_core' => :'Integer',
        :'num_numa_nodes' => :'Integer',
        :'memory_size_bytes' => :'Integer',
        :'is_vcpu_hard_pinning_enabled' => :'Boolean',
        :'is_cpu_passthrough_enabled' => :'Boolean',
        :'enabled_cpu_features' => :'Array<VmmV40AhvConfigCpuFeature>',
        :'is_memory_overcommit_enabled' => :'Boolean',
        :'is_gpu_console_enabled' => :'Boolean',
        :'is_cpu_hotplug_enabled' => :'Boolean',
        :'is_scsi_controller_enabled' => :'Boolean',
        :'generation_uuid' => :'String',
        :'bios_uuid' => :'String',
        :'categories' => :'Array<VmmV40AhvConfigCategoryReference>',
        :'ownership_info' => :'VmmV40AhvConfigOwnershipInfo',
        :'host' => :'VmmV40AhvConfigHostReference',
        :'cluster' => :'VmmV40AhvConfigClusterReference',
        :'availability_zone' => :'VmmV40AhvConfigAvailabilityZoneReference',
        :'guest_customization' => :'VmmV40AhvConfigGuestCustomizationParams',
        :'guest_tools' => :'VmmV40AhvConfigGuestTools',
        :'hardware_clock_timezone' => :'String',
        :'is_branding_enabled' => :'Boolean',
        :'boot_config' => :'VmmV40AhvConfigVmAllOfBootConfig',
        :'is_vga_console_enabled' => :'Boolean',
        :'machine_type' => :'VmmV40AhvConfigMachineType',
        :'power_state' => :'VmmV40AhvConfigPowerState',
        :'vtpm_config' => :'VmmV40AhvConfigVtpmConfig',
        :'is_agent_vm' => :'Boolean',
        :'apc_config' => :'VmmV40AhvConfigApcConfig',
        :'is_live_migrate_capable' => :'Boolean',
        :'is_cross_cluster_migration_in_progress' => :'Boolean',
        :'storage_config' => :'VmmV40AhvConfigADSFVmStorageConfig',
        :'disks' => :'Array<VmmV40AhvConfigDisk>',
        :'cd_roms' => :'Array<VmmV40AhvConfigCdRom>',
        :'nics' => :'Array<VmmV40AhvConfigNic>',
        :'gpus' => :'Array<VmmV40AhvConfigGpu>',
        :'serial_ports' => :'Array<VmmV40AhvConfigSerialPort>',
        :'protection_type' => :'VmmV40AhvConfigProtectionType',
        :'protection_policy_state' => :'VmmV40AhvConfigProtectionPolicyState',
        :'pcie_devices' => :'Array<VmmV40AhvConfigPcieDevice>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'ext_id',
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'CommonV10ResponseExternalizableAbstractModel'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NutanixVmm::VmmV40AhvConfigVm` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NutanixVmm::VmmV40AhvConfigVm`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'tenant_id')
        self.tenant_id = attributes[:'tenant_id']
      end

      if attributes.key?(:'ext_id')
        self.ext_id = attributes[:'ext_id']
      end

      if attributes.key?(:'links')
        if (value = attributes[:'links']).is_a?(Array)
          self.links = value
        end
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'create_time')
        self.create_time = attributes[:'create_time']
      end

      if attributes.key?(:'update_time')
        self.update_time = attributes[:'update_time']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.key?(:'num_sockets')
        self.num_sockets = attributes[:'num_sockets']
      end

      if attributes.key?(:'num_cores_per_socket')
        self.num_cores_per_socket = attributes[:'num_cores_per_socket']
      end

      if attributes.key?(:'num_threads_per_core')
        self.num_threads_per_core = attributes[:'num_threads_per_core']
      end

      if attributes.key?(:'num_numa_nodes')
        self.num_numa_nodes = attributes[:'num_numa_nodes']
      end

      if attributes.key?(:'memory_size_bytes')
        self.memory_size_bytes = attributes[:'memory_size_bytes']
      end

      if attributes.key?(:'is_vcpu_hard_pinning_enabled')
        self.is_vcpu_hard_pinning_enabled = attributes[:'is_vcpu_hard_pinning_enabled']
      end

      if attributes.key?(:'is_cpu_passthrough_enabled')
        self.is_cpu_passthrough_enabled = attributes[:'is_cpu_passthrough_enabled']
      end

      if attributes.key?(:'enabled_cpu_features')
        if (value = attributes[:'enabled_cpu_features']).is_a?(Array)
          self.enabled_cpu_features = value
        end
      end

      if attributes.key?(:'is_memory_overcommit_enabled')
        self.is_memory_overcommit_enabled = attributes[:'is_memory_overcommit_enabled']
      end

      if attributes.key?(:'is_gpu_console_enabled')
        self.is_gpu_console_enabled = attributes[:'is_gpu_console_enabled']
      end

      if attributes.key?(:'is_cpu_hotplug_enabled')
        self.is_cpu_hotplug_enabled = attributes[:'is_cpu_hotplug_enabled']
      end

      if attributes.key?(:'is_scsi_controller_enabled')
        self.is_scsi_controller_enabled = attributes[:'is_scsi_controller_enabled']
      end

      if attributes.key?(:'generation_uuid')
        self.generation_uuid = attributes[:'generation_uuid']
      end

      if attributes.key?(:'bios_uuid')
        self.bios_uuid = attributes[:'bios_uuid']
      end

      if attributes.key?(:'categories')
        if (value = attributes[:'categories']).is_a?(Array)
          self.categories = value
        end
      end

      if attributes.key?(:'ownership_info')
        self.ownership_info = attributes[:'ownership_info']
      end

      if attributes.key?(:'host')
        self.host = attributes[:'host']
      end

      if attributes.key?(:'cluster')
        self.cluster = attributes[:'cluster']
      end

      if attributes.key?(:'availability_zone')
        self.availability_zone = attributes[:'availability_zone']
      end

      if attributes.key?(:'guest_customization')
        self.guest_customization = attributes[:'guest_customization']
      end

      if attributes.key?(:'guest_tools')
        self.guest_tools = attributes[:'guest_tools']
      end

      if attributes.key?(:'hardware_clock_timezone')
        self.hardware_clock_timezone = attributes[:'hardware_clock_timezone']
      else
        self.hardware_clock_timezone = 'UTC'
      end

      if attributes.key?(:'is_branding_enabled')
        self.is_branding_enabled = attributes[:'is_branding_enabled']
      end

      if attributes.key?(:'boot_config')
        self.boot_config = attributes[:'boot_config']
      end

      if attributes.key?(:'is_vga_console_enabled')
        self.is_vga_console_enabled = attributes[:'is_vga_console_enabled']
      end

      if attributes.key?(:'machine_type')
        self.machine_type = attributes[:'machine_type']
      end

      if attributes.key?(:'power_state')
        self.power_state = attributes[:'power_state']
      end

      if attributes.key?(:'vtpm_config')
        self.vtpm_config = attributes[:'vtpm_config']
      end

      if attributes.key?(:'is_agent_vm')
        self.is_agent_vm = attributes[:'is_agent_vm']
      end

      if attributes.key?(:'apc_config')
        self.apc_config = attributes[:'apc_config']
      end

      if attributes.key?(:'is_live_migrate_capable')
        self.is_live_migrate_capable = attributes[:'is_live_migrate_capable']
      end

      if attributes.key?(:'is_cross_cluster_migration_in_progress')
        self.is_cross_cluster_migration_in_progress = attributes[:'is_cross_cluster_migration_in_progress']
      end

      if attributes.key?(:'storage_config')
        self.storage_config = attributes[:'storage_config']
      end

      if attributes.key?(:'disks')
        if (value = attributes[:'disks']).is_a?(Array)
          self.disks = value
        end
      end

      if attributes.key?(:'cd_roms')
        if (value = attributes[:'cd_roms']).is_a?(Array)
          self.cd_roms = value
        end
      end

      if attributes.key?(:'nics')
        if (value = attributes[:'nics']).is_a?(Array)
          self.nics = value
        end
      end

      if attributes.key?(:'gpus')
        if (value = attributes[:'gpus']).is_a?(Array)
          self.gpus = value
        end
      end

      if attributes.key?(:'serial_ports')
        if (value = attributes[:'serial_ports']).is_a?(Array)
          self.serial_ports = value
        end
      end

      if attributes.key?(:'protection_type')
        self.protection_type = attributes[:'protection_type']
      end

      if attributes.key?(:'protection_policy_state')
        self.protection_policy_state = attributes[:'protection_policy_state']
      end

      if attributes.key?(:'pcie_devices')
        if (value = attributes[:'pcie_devices']).is_a?(Array)
          self.pcie_devices = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@tenant_id.nil? && @tenant_id !~ pattern
        invalid_properties.push("invalid value for \"tenant_id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@ext_id.nil? && @ext_id !~ pattern
        invalid_properties.push("invalid value for \"ext_id\", must conform to the pattern #{pattern}.")
      end

      if !@links.nil? && @links.length > 20
        invalid_properties.push('invalid value for "links", number of items must be less than or equal to 20.')
      end

      if !@links.nil? && @links.length < 0
        invalid_properties.push('invalid value for "links", number of items must be greater than or equal to 0.')
      end

      if !@name.nil? && @name.to_s.length > 80
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 80.')
      end

      if !@num_sockets.nil? && @num_sockets < 1
        invalid_properties.push('invalid value for "num_sockets", must be greater than or equal to 1.')
      end

      if !@num_cores_per_socket.nil? && @num_cores_per_socket < 1
        invalid_properties.push('invalid value for "num_cores_per_socket", must be greater than or equal to 1.')
      end

      if !@num_threads_per_core.nil? && @num_threads_per_core < 1
        invalid_properties.push('invalid value for "num_threads_per_core", must be greater than or equal to 1.')
      end

      if !@memory_size_bytes.nil? && @memory_size_bytes < 1
        invalid_properties.push('invalid value for "memory_size_bytes", must be greater than or equal to 1.')
      end

      if !@enabled_cpu_features.nil? && @enabled_cpu_features.length > 256
        invalid_properties.push('invalid value for "enabled_cpu_features", number of items must be less than or equal to 256.')
      end

      if !@enabled_cpu_features.nil? && @enabled_cpu_features.length < 0
        invalid_properties.push('invalid value for "enabled_cpu_features", number of items must be greater than or equal to 0.')
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@generation_uuid.nil? && @generation_uuid !~ pattern
        invalid_properties.push("invalid value for \"generation_uuid\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !@bios_uuid.nil? && @bios_uuid !~ pattern
        invalid_properties.push("invalid value for \"bios_uuid\", must conform to the pattern #{pattern}.")
      end

      if !@categories.nil? && @categories.length > 256
        invalid_properties.push('invalid value for "categories", number of items must be less than or equal to 256.')
      end

      if !@categories.nil? && @categories.length < 0
        invalid_properties.push('invalid value for "categories", number of items must be greater than or equal to 0.')
      end

      if !@hardware_clock_timezone.nil? && @hardware_clock_timezone.to_s.length > 64
        invalid_properties.push('invalid value for "hardware_clock_timezone", the character length must be smaller than or equal to 64.')
      end

      if !@disks.nil? && @disks.length > 1024
        invalid_properties.push('invalid value for "disks", number of items must be less than or equal to 1024.')
      end

      if !@disks.nil? && @disks.length < 0
        invalid_properties.push('invalid value for "disks", number of items must be greater than or equal to 0.')
      end

      if !@cd_roms.nil? && @cd_roms.length > 10
        invalid_properties.push('invalid value for "cd_roms", number of items must be less than or equal to 10.')
      end

      if !@cd_roms.nil? && @cd_roms.length < 0
        invalid_properties.push('invalid value for "cd_roms", number of items must be greater than or equal to 0.')
      end

      if !@nics.nil? && @nics.length > 64
        invalid_properties.push('invalid value for "nics", number of items must be less than or equal to 64.')
      end

      if !@nics.nil? && @nics.length < 0
        invalid_properties.push('invalid value for "nics", number of items must be greater than or equal to 0.')
      end

      if !@gpus.nil? && @gpus.length > 16
        invalid_properties.push('invalid value for "gpus", number of items must be less than or equal to 16.')
      end

      if !@gpus.nil? && @gpus.length < 0
        invalid_properties.push('invalid value for "gpus", number of items must be greater than or equal to 0.')
      end

      if !@serial_ports.nil? && @serial_ports.length > 4
        invalid_properties.push('invalid value for "serial_ports", number of items must be less than or equal to 4.')
      end

      if !@serial_ports.nil? && @serial_ports.length < 0
        invalid_properties.push('invalid value for "serial_ports", number of items must be greater than or equal to 0.')
      end

      if !@pcie_devices.nil? && @pcie_devices.length > 64
        invalid_properties.push('invalid value for "pcie_devices", number of items must be less than or equal to 64.')
      end

      if !@pcie_devices.nil? && @pcie_devices.length < 0
        invalid_properties.push('invalid value for "pcie_devices", number of items must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@tenant_id.nil? && @tenant_id !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@ext_id.nil? && @ext_id !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@links.nil? && @links.length > 20
      return false if !@links.nil? && @links.length < 0
      return false if !@name.nil? && @name.to_s.length > 80
      return false if !@num_sockets.nil? && @num_sockets < 1
      return false if !@num_cores_per_socket.nil? && @num_cores_per_socket < 1
      return false if !@num_threads_per_core.nil? && @num_threads_per_core < 1
      return false if !@memory_size_bytes.nil? && @memory_size_bytes < 1
      return false if !@enabled_cpu_features.nil? && @enabled_cpu_features.length > 256
      return false if !@enabled_cpu_features.nil? && @enabled_cpu_features.length < 0
      return false if !@generation_uuid.nil? && @generation_uuid !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@bios_uuid.nil? && @bios_uuid !~ Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      return false if !@categories.nil? && @categories.length > 256
      return false if !@categories.nil? && @categories.length < 0
      return false if !@hardware_clock_timezone.nil? && @hardware_clock_timezone.to_s.length > 64
      return false if !@disks.nil? && @disks.length > 1024
      return false if !@disks.nil? && @disks.length < 0
      return false if !@cd_roms.nil? && @cd_roms.length > 10
      return false if !@cd_roms.nil? && @cd_roms.length < 0
      return false if !@nics.nil? && @nics.length > 64
      return false if !@nics.nil? && @nics.length < 0
      return false if !@gpus.nil? && @gpus.length > 16
      return false if !@gpus.nil? && @gpus.length < 0
      return false if !@serial_ports.nil? && @serial_ports.length > 4
      return false if !@serial_ports.nil? && @serial_ports.length < 0
      return false if !@pcie_devices.nil? && @pcie_devices.length > 64
      return false if !@pcie_devices.nil? && @pcie_devices.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] tenant_id Value to be assigned
    def tenant_id=(tenant_id)
      if tenant_id.nil?
        fail ArgumentError, 'tenant_id cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if tenant_id !~ pattern
        fail ArgumentError, "invalid value for \"tenant_id\", must conform to the pattern #{pattern}."
      end

      @tenant_id = tenant_id
    end

    # Custom attribute writer method with validation
    # @param [Object] ext_id Value to be assigned
    def ext_id=(ext_id)
      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if !ext_id.nil? && ext_id !~ pattern
        fail ArgumentError, "invalid value for \"ext_id\", must conform to the pattern #{pattern}."
      end

      @ext_id = ext_id
    end

    # Custom attribute writer method with validation
    # @param [Object] links Value to be assigned
    def links=(links)
      if links.nil?
        fail ArgumentError, 'links cannot be nil'
      end

      if links.length > 20
        fail ArgumentError, 'invalid value for "links", number of items must be less than or equal to 20.'
      end

      if links.length < 0
        fail ArgumentError, 'invalid value for "links", number of items must be greater than or equal to 0.'
      end

      @links = links
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 80
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 80.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] num_sockets Value to be assigned
    def num_sockets=(num_sockets)
      if num_sockets.nil?
        fail ArgumentError, 'num_sockets cannot be nil'
      end

      if num_sockets < 1
        fail ArgumentError, 'invalid value for "num_sockets", must be greater than or equal to 1.'
      end

      @num_sockets = num_sockets
    end

    # Custom attribute writer method with validation
    # @param [Object] num_cores_per_socket Value to be assigned
    def num_cores_per_socket=(num_cores_per_socket)
      if num_cores_per_socket.nil?
        fail ArgumentError, 'num_cores_per_socket cannot be nil'
      end

      if num_cores_per_socket < 1
        fail ArgumentError, 'invalid value for "num_cores_per_socket", must be greater than or equal to 1.'
      end

      @num_cores_per_socket = num_cores_per_socket
    end

    # Custom attribute writer method with validation
    # @param [Object] num_threads_per_core Value to be assigned
    def num_threads_per_core=(num_threads_per_core)
      if num_threads_per_core.nil?
        fail ArgumentError, 'num_threads_per_core cannot be nil'
      end

      if num_threads_per_core < 1
        fail ArgumentError, 'invalid value for "num_threads_per_core", must be greater than or equal to 1.'
      end

      @num_threads_per_core = num_threads_per_core
    end

    # Custom attribute writer method with validation
    # @param [Object] memory_size_bytes Value to be assigned
    def memory_size_bytes=(memory_size_bytes)
      if memory_size_bytes.nil?
        fail ArgumentError, 'memory_size_bytes cannot be nil'
      end

      if memory_size_bytes < 1
        fail ArgumentError, 'invalid value for "memory_size_bytes", must be greater than or equal to 1.'
      end

      @memory_size_bytes = memory_size_bytes
    end

    # Custom attribute writer method with validation
    # @param [Object] enabled_cpu_features Value to be assigned
    def enabled_cpu_features=(enabled_cpu_features)
      if enabled_cpu_features.nil?
        fail ArgumentError, 'enabled_cpu_features cannot be nil'
      end

      if enabled_cpu_features.length > 256
        fail ArgumentError, 'invalid value for "enabled_cpu_features", number of items must be less than or equal to 256.'
      end

      if enabled_cpu_features.length < 0
        fail ArgumentError, 'invalid value for "enabled_cpu_features", number of items must be greater than or equal to 0.'
      end

      @enabled_cpu_features = enabled_cpu_features
    end

    # Custom attribute writer method with validation
    # @param [Object] generation_uuid Value to be assigned
    def generation_uuid=(generation_uuid)
      if generation_uuid.nil?
        fail ArgumentError, 'generation_uuid cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if generation_uuid !~ pattern
        fail ArgumentError, "invalid value for \"generation_uuid\", must conform to the pattern #{pattern}."
      end

      @generation_uuid = generation_uuid
    end

    # Custom attribute writer method with validation
    # @param [Object] bios_uuid Value to be assigned
    def bios_uuid=(bios_uuid)
      if bios_uuid.nil?
        fail ArgumentError, 'bios_uuid cannot be nil'
      end

      pattern = Regexp.new(/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/)
      if bios_uuid !~ pattern
        fail ArgumentError, "invalid value for \"bios_uuid\", must conform to the pattern #{pattern}."
      end

      @bios_uuid = bios_uuid
    end

    # Custom attribute writer method with validation
    # @param [Object] categories Value to be assigned
    def categories=(categories)
      if categories.nil?
        fail ArgumentError, 'categories cannot be nil'
      end

      if categories.length > 256
        fail ArgumentError, 'invalid value for "categories", number of items must be less than or equal to 256.'
      end

      if categories.length < 0
        fail ArgumentError, 'invalid value for "categories", number of items must be greater than or equal to 0.'
      end

      @categories = categories
    end

    # Custom attribute writer method with validation
    # @param [Object] hardware_clock_timezone Value to be assigned
    def hardware_clock_timezone=(hardware_clock_timezone)
      if hardware_clock_timezone.nil?
        fail ArgumentError, 'hardware_clock_timezone cannot be nil'
      end

      if hardware_clock_timezone.to_s.length > 64
        fail ArgumentError, 'invalid value for "hardware_clock_timezone", the character length must be smaller than or equal to 64.'
      end

      @hardware_clock_timezone = hardware_clock_timezone
    end

    # Custom attribute writer method with validation
    # @param [Object] disks Value to be assigned
    def disks=(disks)
      if disks.nil?
        fail ArgumentError, 'disks cannot be nil'
      end

      if disks.length > 1024
        fail ArgumentError, 'invalid value for "disks", number of items must be less than or equal to 1024.'
      end

      if disks.length < 0
        fail ArgumentError, 'invalid value for "disks", number of items must be greater than or equal to 0.'
      end

      @disks = disks
    end

    # Custom attribute writer method with validation
    # @param [Object] cd_roms Value to be assigned
    def cd_roms=(cd_roms)
      if cd_roms.nil?
        fail ArgumentError, 'cd_roms cannot be nil'
      end

      if cd_roms.length > 10
        fail ArgumentError, 'invalid value for "cd_roms", number of items must be less than or equal to 10.'
      end

      if cd_roms.length < 0
        fail ArgumentError, 'invalid value for "cd_roms", number of items must be greater than or equal to 0.'
      end

      @cd_roms = cd_roms
    end

    # Custom attribute writer method with validation
    # @param [Object] nics Value to be assigned
    def nics=(nics)
      if nics.nil?
        fail ArgumentError, 'nics cannot be nil'
      end

      if nics.length > 64
        fail ArgumentError, 'invalid value for "nics", number of items must be less than or equal to 64.'
      end

      if nics.length < 0
        fail ArgumentError, 'invalid value for "nics", number of items must be greater than or equal to 0.'
      end

      @nics = nics
    end

    # Custom attribute writer method with validation
    # @param [Object] gpus Value to be assigned
    def gpus=(gpus)
      if gpus.nil?
        fail ArgumentError, 'gpus cannot be nil'
      end

      if gpus.length > 16
        fail ArgumentError, 'invalid value for "gpus", number of items must be less than or equal to 16.'
      end

      if gpus.length < 0
        fail ArgumentError, 'invalid value for "gpus", number of items must be greater than or equal to 0.'
      end

      @gpus = gpus
    end

    # Custom attribute writer method with validation
    # @param [Object] serial_ports Value to be assigned
    def serial_ports=(serial_ports)
      if serial_ports.nil?
        fail ArgumentError, 'serial_ports cannot be nil'
      end

      if serial_ports.length > 4
        fail ArgumentError, 'invalid value for "serial_ports", number of items must be less than or equal to 4.'
      end

      if serial_ports.length < 0
        fail ArgumentError, 'invalid value for "serial_ports", number of items must be greater than or equal to 0.'
      end

      @serial_ports = serial_ports
    end

    # Custom attribute writer method with validation
    # @param [Object] pcie_devices Value to be assigned
    def pcie_devices=(pcie_devices)
      if pcie_devices.nil?
        fail ArgumentError, 'pcie_devices cannot be nil'
      end

      if pcie_devices.length > 64
        fail ArgumentError, 'invalid value for "pcie_devices", number of items must be less than or equal to 64.'
      end

      if pcie_devices.length < 0
        fail ArgumentError, 'invalid value for "pcie_devices", number of items must be greater than or equal to 0.'
      end

      @pcie_devices = pcie_devices
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          tenant_id == o.tenant_id &&
          ext_id == o.ext_id &&
          links == o.links &&
          name == o.name &&
          description == o.description &&
          create_time == o.create_time &&
          update_time == o.update_time &&
          source == o.source &&
          num_sockets == o.num_sockets &&
          num_cores_per_socket == o.num_cores_per_socket &&
          num_threads_per_core == o.num_threads_per_core &&
          num_numa_nodes == o.num_numa_nodes &&
          memory_size_bytes == o.memory_size_bytes &&
          is_vcpu_hard_pinning_enabled == o.is_vcpu_hard_pinning_enabled &&
          is_cpu_passthrough_enabled == o.is_cpu_passthrough_enabled &&
          enabled_cpu_features == o.enabled_cpu_features &&
          is_memory_overcommit_enabled == o.is_memory_overcommit_enabled &&
          is_gpu_console_enabled == o.is_gpu_console_enabled &&
          is_cpu_hotplug_enabled == o.is_cpu_hotplug_enabled &&
          is_scsi_controller_enabled == o.is_scsi_controller_enabled &&
          generation_uuid == o.generation_uuid &&
          bios_uuid == o.bios_uuid &&
          categories == o.categories &&
          ownership_info == o.ownership_info &&
          host == o.host &&
          cluster == o.cluster &&
          availability_zone == o.availability_zone &&
          guest_customization == o.guest_customization &&
          guest_tools == o.guest_tools &&
          hardware_clock_timezone == o.hardware_clock_timezone &&
          is_branding_enabled == o.is_branding_enabled &&
          boot_config == o.boot_config &&
          is_vga_console_enabled == o.is_vga_console_enabled &&
          machine_type == o.machine_type &&
          power_state == o.power_state &&
          vtpm_config == o.vtpm_config &&
          is_agent_vm == o.is_agent_vm &&
          apc_config == o.apc_config &&
          is_live_migrate_capable == o.is_live_migrate_capable &&
          is_cross_cluster_migration_in_progress == o.is_cross_cluster_migration_in_progress &&
          storage_config == o.storage_config &&
          disks == o.disks &&
          cd_roms == o.cd_roms &&
          nics == o.nics &&
          gpus == o.gpus &&
          serial_ports == o.serial_ports &&
          protection_type == o.protection_type &&
          protection_policy_state == o.protection_policy_state &&
          pcie_devices == o.pcie_devices
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [tenant_id, ext_id, links, name, description, create_time, update_time, source, num_sockets, num_cores_per_socket, num_threads_per_core, num_numa_nodes, memory_size_bytes, is_vcpu_hard_pinning_enabled, is_cpu_passthrough_enabled, enabled_cpu_features, is_memory_overcommit_enabled, is_gpu_console_enabled, is_cpu_hotplug_enabled, is_scsi_controller_enabled, generation_uuid, bios_uuid, categories, ownership_info, host, cluster, availability_zone, guest_customization, guest_tools, hardware_clock_timezone, is_branding_enabled, boot_config, is_vga_console_enabled, machine_type, power_state, vtpm_config, is_agent_vm, apc_config, is_live_migrate_capable, is_cross_cluster_migration_in_progress, storage_config, disks, cd_roms, nics, gpus, serial_ports, protection_type, protection_policy_state, pcie_devices].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NutanixVmm.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
