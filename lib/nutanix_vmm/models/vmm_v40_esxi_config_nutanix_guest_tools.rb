=begin
#Nutanix Virtual Machine Management APIs

#Manage the life-cycle of virtual machines hosted on Nutanix

The version of the OpenAPI document: 4.0

Generated by: https://openapi-generator.tech
Generator version: 7.16.0

=end

require 'date'
require 'time'

module NutanixVmm
  # The details about Nutanix Guest Tools for a VM.
  class VmmV40EsxiConfigNutanixGuestTools
    # Version of Nutanix Guest Tools installed on the VM.
    attr_accessor :version

    # Indicates whether Nutanix Guest Tools is installed on the VM or not.
    attr_accessor :is_installed

    # Indicates whether Nutanix Guest Tools is enabled or not.
    attr_accessor :is_enabled

    # Indicates whether Nutanix Guest Tools ISO is inserted or not.
    attr_accessor :is_iso_inserted

    # The list of the application names that are enabled on the guest VM.
    attr_accessor :capabilities

    # Version of Nutanix Guest Tools available on the cluster.
    attr_accessor :available_version

    # Version of the operating system on the VM.
    attr_accessor :guest_os_version

    # Indicates whether the communication from VM to CVM is active or not.
    attr_accessor :is_reachable

    # Indicates whether the VM is configured to take VSS snapshots through NGT or not.
    attr_accessor :is_vss_snapshot_capable

    # Indicates whether the VM mobility drivers are installed on the VM or not.
    attr_accessor :is_vm_mobility_drivers_installed

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'version' => :'version',
        :'is_installed' => :'isInstalled',
        :'is_enabled' => :'isEnabled',
        :'is_iso_inserted' => :'isIsoInserted',
        :'capabilities' => :'capabilities',
        :'available_version' => :'availableVersion',
        :'guest_os_version' => :'guestOsVersion',
        :'is_reachable' => :'isReachable',
        :'is_vss_snapshot_capable' => :'isVssSnapshotCapable',
        :'is_vm_mobility_drivers_installed' => :'isVmMobilityDriversInstalled'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'version' => :'String',
        :'is_installed' => :'Boolean',
        :'is_enabled' => :'Boolean',
        :'is_iso_inserted' => :'Boolean',
        :'capabilities' => :'Array<VmmV40EsxiConfigNutanixGuestToolsCapability>',
        :'available_version' => :'String',
        :'guest_os_version' => :'String',
        :'is_reachable' => :'Boolean',
        :'is_vss_snapshot_capable' => :'Boolean',
        :'is_vm_mobility_drivers_installed' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NutanixVmm::VmmV40EsxiConfigNutanixGuestTools` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NutanixVmm::VmmV40EsxiConfigNutanixGuestTools`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.key?(:'is_installed')
        self.is_installed = attributes[:'is_installed']
      end

      if attributes.key?(:'is_enabled')
        self.is_enabled = attributes[:'is_enabled']
      end

      if attributes.key?(:'is_iso_inserted')
        self.is_iso_inserted = attributes[:'is_iso_inserted']
      end

      if attributes.key?(:'capabilities')
        if (value = attributes[:'capabilities']).is_a?(Array)
          self.capabilities = value
        end
      end

      if attributes.key?(:'available_version')
        self.available_version = attributes[:'available_version']
      end

      if attributes.key?(:'guest_os_version')
        self.guest_os_version = attributes[:'guest_os_version']
      end

      if attributes.key?(:'is_reachable')
        self.is_reachable = attributes[:'is_reachable']
      end

      if attributes.key?(:'is_vss_snapshot_capable')
        self.is_vss_snapshot_capable = attributes[:'is_vss_snapshot_capable']
      end

      if attributes.key?(:'is_vm_mobility_drivers_installed')
        self.is_vm_mobility_drivers_installed = attributes[:'is_vm_mobility_drivers_installed']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@capabilities.nil? && @capabilities.length > 2
        invalid_properties.push('invalid value for "capabilities", number of items must be less than or equal to 2.')
      end

      if !@capabilities.nil? && @capabilities.length < 0
        invalid_properties.push('invalid value for "capabilities", number of items must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@capabilities.nil? && @capabilities.length > 2
      return false if !@capabilities.nil? && @capabilities.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] capabilities Value to be assigned
    def capabilities=(capabilities)
      if capabilities.nil?
        fail ArgumentError, 'capabilities cannot be nil'
      end

      if capabilities.length > 2
        fail ArgumentError, 'invalid value for "capabilities", number of items must be less than or equal to 2.'
      end

      if capabilities.length < 0
        fail ArgumentError, 'invalid value for "capabilities", number of items must be greater than or equal to 0.'
      end

      @capabilities = capabilities
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          version == o.version &&
          is_installed == o.is_installed &&
          is_enabled == o.is_enabled &&
          is_iso_inserted == o.is_iso_inserted &&
          capabilities == o.capabilities &&
          available_version == o.available_version &&
          guest_os_version == o.guest_os_version &&
          is_reachable == o.is_reachable &&
          is_vss_snapshot_capable == o.is_vss_snapshot_capable &&
          is_vm_mobility_drivers_installed == o.is_vm_mobility_drivers_installed
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [version, is_installed, is_enabled, is_iso_inserted, capabilities, available_version, guest_os_version, is_reachable, is_vss_snapshot_capable, is_vm_mobility_drivers_installed].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NutanixVmm.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
