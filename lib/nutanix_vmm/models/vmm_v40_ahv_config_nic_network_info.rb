=begin
#Nutanix Virtual Machine Management APIs

#Manage the life-cycle of virtual machines hosted on Nutanix

The version of the OpenAPI document: 4.0

Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module NutanixVmm
  # Network information for a NIC.
  class VmmV40AhvConfigNicNetworkInfo
    attr_accessor :nic_type

    attr_accessor :network_function_chain

    attr_accessor :network_function_nic_type

    attr_accessor :subnet

    attr_accessor :vlan_mode

    # List of networks to trunk if VLAN mode is marked as TRUNKED. If empty and VLAN mode is set to TRUNKED, all the VLANs are trunked.
    attr_accessor :trunked_vlans

    # Indicates whether an unknown unicast traffic is forwarded to this NIC or not. This is applicable only for the NICs on the overlay subnets.
    attr_accessor :should_allow_unknown_macs

    attr_accessor :ipv4_config

    attr_accessor :ipv4_info

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'nic_type' => :'nicType',
        :'network_function_chain' => :'networkFunctionChain',
        :'network_function_nic_type' => :'networkFunctionNicType',
        :'subnet' => :'subnet',
        :'vlan_mode' => :'vlanMode',
        :'trunked_vlans' => :'trunkedVlans',
        :'should_allow_unknown_macs' => :'shouldAllowUnknownMacs',
        :'ipv4_config' => :'ipv4Config',
        :'ipv4_info' => :'ipv4Info'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'nic_type' => :'VmmV40AhvConfigNicType',
        :'network_function_chain' => :'VmmV40AhvConfigNetworkFunctionChainReference',
        :'network_function_nic_type' => :'VmmV40AhvConfigNetworkFunctionNicType',
        :'subnet' => :'VmmV40AhvConfigSubnetReference',
        :'vlan_mode' => :'VmmV40AhvConfigVlanMode',
        :'trunked_vlans' => :'Array<Integer>',
        :'should_allow_unknown_macs' => :'Boolean',
        :'ipv4_config' => :'VmmV40AhvConfigIpv4Config',
        :'ipv4_info' => :'VmmV40AhvConfigIpv4Info'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `NutanixVmm::VmmV40AhvConfigNicNetworkInfo` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `NutanixVmm::VmmV40AhvConfigNicNetworkInfo`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'nic_type')
        self.nic_type = attributes[:'nic_type']
      end

      if attributes.key?(:'network_function_chain')
        self.network_function_chain = attributes[:'network_function_chain']
      end

      if attributes.key?(:'network_function_nic_type')
        self.network_function_nic_type = attributes[:'network_function_nic_type']
      end

      if attributes.key?(:'subnet')
        self.subnet = attributes[:'subnet']
      end

      if attributes.key?(:'vlan_mode')
        self.vlan_mode = attributes[:'vlan_mode']
      end

      if attributes.key?(:'trunked_vlans')
        if (value = attributes[:'trunked_vlans']).is_a?(Array)
          self.trunked_vlans = value
        end
      end

      if attributes.key?(:'should_allow_unknown_macs')
        self.should_allow_unknown_macs = attributes[:'should_allow_unknown_macs']
      end

      if attributes.key?(:'ipv4_config')
        self.ipv4_config = attributes[:'ipv4_config']
      end

      if attributes.key?(:'ipv4_info')
        self.ipv4_info = attributes[:'ipv4_info']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@trunked_vlans.nil? && @trunked_vlans.length > 4095
        invalid_properties.push('invalid value for "trunked_vlans", number of items must be less than or equal to 4095.')
      end

      if !@trunked_vlans.nil? && @trunked_vlans.length < 0
        invalid_properties.push('invalid value for "trunked_vlans", number of items must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@trunked_vlans.nil? && @trunked_vlans.length > 4095
      return false if !@trunked_vlans.nil? && @trunked_vlans.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] trunked_vlans Value to be assigned
    def trunked_vlans=(trunked_vlans)
      if trunked_vlans.nil?
        fail ArgumentError, 'trunked_vlans cannot be nil'
      end

      if trunked_vlans.length > 4095
        fail ArgumentError, 'invalid value for "trunked_vlans", number of items must be less than or equal to 4095.'
      end

      if trunked_vlans.length < 0
        fail ArgumentError, 'invalid value for "trunked_vlans", number of items must be greater than or equal to 0.'
      end

      @trunked_vlans = trunked_vlans
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          nic_type == o.nic_type &&
          network_function_chain == o.network_function_chain &&
          network_function_nic_type == o.network_function_nic_type &&
          subnet == o.subnet &&
          vlan_mode == o.vlan_mode &&
          trunked_vlans == o.trunked_vlans &&
          should_allow_unknown_macs == o.should_allow_unknown_macs &&
          ipv4_config == o.ipv4_config &&
          ipv4_info == o.ipv4_info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [nic_type, network_function_chain, network_function_nic_type, subnet, vlan_mode, trunked_vlans, should_allow_unknown_macs, ipv4_config, ipv4_info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = NutanixVmm.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
